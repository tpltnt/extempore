;;; tests/adt.xtm -- unit tests for libs/core/adt.xtm

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; run these tests with (xtmtest-run-tests "tests/core/adt.xtm" #t #f)

;;; Code:

(sys:load "libs/core/adt.xtm")

(define *impc:ti:print-full-generic-types* #f)
(define *impc:ti:print-code-specialization-compiles* #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; generic types
;;

(xtmtest-compile
 '(bind-func print:[void,Point*]*
    (lambda (p)
      (if (null? p)
          (begin (printout "<>") void)
          (begin (printout "<"
                           (tref p 0) ","
                           (tref p 1) ">")
                 void)))))

;; make and return a Point
(xtmtest-compile
 '(bind-func test_generic_point_1
    "Test doc-string"
    (lambda ()
      (let ((x (Point 1.0 2.0)))
        x))))

(xtmtest-compile
 '(bind-func test_generic_point_2
    (lambda ()
      (let ((x (Point 1 2)))
        x))))

;; print the point
(xtmtest '(bind-func test_generic_point_3
            (lambda ()
              (let ((x (test_generic_point_1))
                    (y (test_generic_point_2)))
                (println x y))))

         (test_generic_point_3))


;; Generic Size {width,height}
(xtmtest-compile '(bind-type Size <!a,!a>))
;; points and size must be the same primitive type!
(xtmtest-compile '(bind-type Rectangle <Point*,Size*>))
;; this basically the same as Rectangle
(xtmtest-compile '(bind-type RectangleA <Point{!a}*,Size{!a}*>))
;; this allows *different* point and size primitives
(xtmtest-compile '(bind-type RectangleB <Point{!a}*,Size{!b}*>))

;; print routines for everything!
(xtmtest-compile '(bind-func print:[void,Size*]*
                   (lambda (p)
                     (if (null? p)
                         (begin (printout "<>") void)
                         (begin (printout "<"
                                          (tref p 0) ","
                                          (tref p 1) ">")
                                void)))))

(xtmtest-compile
 '(bind-func print:[void,Rectangle*]*
    (lambda (p)
      (if (null? p)
          (begin (printout "<>") void)
          (begin (printout "<"
                           (tref p 0) ","
                           (tref p 1) ">")
                 void)))))

(xtmtest-compile
 '(bind-func print:[void,RectangleA*]*
    (lambda (p)
      (if (null? p)
          (begin (printout "<>") void)
          (begin (printout "<"
                           (tref p 0) ","
                           (tref p 1) ">")
                 void)))))

(xtmtest-compile
 '(bind-func print:[void,RectangleB*]*
    (lambda (p)
      (if (null? p)
          (begin (printout "<>") void)
          (begin (printout "<"
                           (tref p 0) ","
                           (tref p 1) ">")
                 void)))))

;; make some rectangles
(xtmtest-compile
 '(bind-func test_rectangle_1
    (lambda ()
      (let ((a (Rectangle (Point 1:i64 2:i64) (Size 3:i64 4:i64)))
            (b (RectangleA (Point 5:i64 6:i64) (Size 7:i64 8:i64)))
            (c (RectangleB (Point 9.0:double 10.0:double) (Size 11:i64 12:i64))))
        c))))

(xtmtest '(bind-func test_rectangle_2
            (lambda ()
              (let ((a (Rectangle (Point 1 2) (Size 3 4)))
                    (b (RectangleA (Point 5 6) (Size 7 8)))
                    (c (RectangleB (Point 9. 10.) (Size 11 12))))
                (println a)
                (println b)
                (println c))))

         (test_rectangle_2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; recursive generic types
;;

(xtmtest-compile
 '(bind-type Tree <!a,Tree*,Tree*>))

(xtmtest-compile
 '(bind-func Leaf:[Tree:<!a,Tree*,Tree*>*,!a]*
    "Make A Leaf"
    (lambda (x)
      (let ((t (Tree x null null)))
        t))))

(xtmtest-compile
 '(bind-func tree_value:[!a,Tree*]*
    (lambda (t)
      (tref t 0))))

(xtmtest-compile
 '(bind-func print:[void,Tree*]*
    (lambda (t)
      (let ((f (lambda (t)
                 (if (null? t) void
                     (begin
                       (printout (tree_value t) " ")
                       (f (tref t 1))
                       (f (tref t 2))
                       void)))))
        (f t)
        (println)))))


(xtmtest '(bind-func tree_test
            (lambda ()
              (let ((t1 (Leaf 3))
                    (t2 (Leaf 4))
                    (t3 (Tree 2 t1 t2))
                    (t4 (Tree 1 t3 null))
                    (t5 (Leaf (Point 3.0 4.0)))
                    (t6 (Tree (Point 1.0 2.0) t5 null)))
                (println)
                (printout "Integer Tree: ")
                (printout t4)
                (printout "Point Tree: ")
                (printout t6)
                (println))))

         (tree_test))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; arity overload
;;

(xtmtest-compile
 '(bind-func polygen:[!a,!a]*
    (lambda (x)
      (* 1 x))))

(xtmtest-compile
 '(bind-func polygen:[!a,!a,!a]*
    (lambda (x y)
      (* 1 x y))))

(xtmtest-compile
 '(bind-func polygen:[!a,!a,!a,!a]*
    (lambda (x y z)
      (* 1 x y z))))

(xtmtest '(bind-func arity_test
            (lambda (x:i32 y:i32 z:i32)
              (let ((a (polygen x))
                    (b (polygen x y))
                    (c (polygen x y z)))
                (println a b c)
                c)))

         (arity_test 1 2 3) 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; list tests
;;

(xtmtest '(bind-func test_list_1
            (lambda ()
              (let ((l (list 1 2 3 4 5)))
                (println l)
                (car (cdr l)))))

         (test_list_1) 2)

(xtmtest '(bind-func test_list_2
            (lambda ()
              (let ((l (list 1 2 3 4 5))
                    (l2 (map (lambda (x) (* x x)) l)))
                (println l2))))

         (test_list_2))

(xtmtest '(bind-func test_list_3
            (lambda ()
              (let ((l (list 1.0 2.0 3.0 4.0))
                    (f (lambda (x) (* x x)))
                    (l2 (map f l)))
                (println l2))))

         (test_list_3))

(xtmtest '(bind-func test_set_car
            (lambda ()
              (let ((lst (list 1 2 3)))
                (set_car (nth_tail lst 1) 5)
                (println lst)
                (= (nth lst 1) 5))))

         (test_set_car) 1)

(xtmtest '(bind-func test_set_cdr
            (lambda ()
              (let ((lst1 (list 1 2 3))
                    (lst2 (list 4 5 6)))
                (set_cdr (nth_tail lst1 2) lst2)
                (println lst1)
                (= (length lst1) 6))))

         (test_set_cdr) 1)

(xtmtest '(bind-func test_list_4
            (lambda ()
              (let ((l1 (list 1 2 3 4))
                    (l2 (list 1.0 2.0 3.0 4.0)))
                (map (lambda (a b) (Pair a b)) l1 l2))))
         (test_list_4))

(xtmtest '(bind-func test_list_5
            (lambda ()
              (let ((l (test_list_4)))
                (for-each (lambda (x) (println x)) l))))

         (test_list_5))

(xtmtest '(bind-func test_list_foreach
            (lambda ()
              (let ((l (test_list_4)))
                (for-each (lambda (a b)
                            (println (first a)
                                     (second b)))
                          l l)
                (for-each (lambda (a b c)
                            (println (first a)
                                     (second b)
                                     (first c)))
                          l l l))))

         (test_list_foreach))

(xtmtest
 '(bind-func test_list_flatten
    (lambda ()
      (let ((l1 (list 1 2 3))
            (l2 (list 4 5 6))
            (l3 (list l1 l2))
            (l4 (flatten l3)))
        (equal (list 1 2 3 4 5 6) l4))))
 (test_list_flatten) 1)

;; spec'd funcs
(xtmtest
 '(bind-func test_map_pair
    (lambda (l1 l2)
      (map Pair:$[i64,double]* l1 l2)))
 (test_map_pair))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; lists of lists

(xtmtest
 '(bind-func test_list_6
    (lambda ()
      (let ((l1 (list 1 2 3))
            (l2 (list l1 l1 l1)))
        l2)))
 (test_list_6))

(xtmtest
 '(bind-func test_list_7
    (lambda ()
      (let ((l1 (list 1 2 3))
            (l2 (list l1 l1))
            (l3 (list l2 l2)))
        l3)))
 (test_list_7))

;; (bind-func test_list_8
;;   (lambda ()
;;     (let ((l1 (list (Point 1 2) (Point 3 4) (Point 5 6)))
;;           (l2 (list l1 l1 l1)))
;;       (for-each (lambda (x)
;;                   (for-each (lambda (x)
;;                               (printout x ","))
;;                             x)
;;                   (println))
;;                 l2)
;;       l2)))

;; (test-xtfunc (test_list_8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; test some list functions
;;

(xtmtest '(bind-func test_append_insert_length
            (lambda ()
              (let ((v1 (list 1 2 3 4))
                    (v2 (list 5 6 7 8))
                    (v3 (append v1 v2)))
                (insert v3 4 77)
                (println v3)
                (println "length:" (length v3))
                (length v3))))

         (test_append_insert_length) 9)

(xtmtest '(bind-func test_list_membership
            (lambda (x)
              (let ((lst (list 1 2 3))
                    (result (member x lst)))
                (if (not (null? result))
                    (println "list contains" x)
                    (println "list does not contain" x))
                (not (null? result)))))

         (test_list_membership 2) 1)

(xtmtest-result (test_list_membership 4) 0)

(xtmtest
 '(bind-func test_eveni64
    (lambda (x)
      (if (= (bitwise-and x 1) 0) #t #f)))
 (test_eveni64 4) 1)

(xtmtest-result (test_eveni64 45) 0)

(xtmtest '(bind-func test_list_any_1
            (lambda ()
              (let ((l1 (list 1 2 3 4))
                    (l2 (list 1 3)))
                (and (any test_eveni64 l1)
                     (not (any test_eveni64 l2))))))

         (test_list_any_1) 1)

(xtmtest '(bind-func test_list_any_2
            (lambda (x:i64)
              (let ((l1 (range 3))
                    (l2 (list x x x))
                    (f (lambda (a b) (< a b))))
                (any f l1 l2))))

         (test_list_any_2 1) 1)

(xtmtest-result (test_list_any_2 -1) 0)

(xtmtest '(bind-func test_list_every_22
            (lambda (x:i64)
              (let ((l1 (range 3))
                    (l2 (list x x x)))
                (every (lambda (a b) (< a b))
                       l1 l2))))

         (test_list_every_22 3) 1)

(xtmtest-result (test_list_every_22 1) 0)

(xtmtest '(bind-func test_list_swap
            (lambda ()
              (let ((lst (list 1 2 3 4 5)))
                (swap lst 1 3)
                (println lst)
                (= (nth lst 1) 4))))

         (test_list_swap) 1)

(xtmtest '(bind-func test_list_reverse_1
            (lambda ()
              (let ((lst (list 1 2 3 4 5 6))
                    (len (length lst)))
                (and (= (nth lst 2)
                        (nth (reverse lst) (- len 3)))
                     (= (nth lst 4)
                        (nth (reverse lst) (- len 5)))))))

         (test_list_reverse_1) 1)

;; test filter and map arity 2
(xtmtest '(bind-func test_list_filter
            (lambda ()
              (let ((l1 (list (Point 1.0 2.0) (Point 3.0 4.0)))
                    (l2 (list (Size 1.0 1.0) (Size 2.0 2.0)))
                    (r1 (Rectangle (Point 5.0 6.0) (Size 3.0 3.0)))
                    (l3 (map (lambda (x y)
                               (Rectangle x y))
                             l1 l2)))
                (for-each (lambda (x) (println x)) (cons r1 l3))
                (car (filter (lambda (j)
                               (if (= 3.0 (tref (tref j 1) 0))
                                   #t #f))
                             (cons r1 l3))))))

         (test_list_filter))

(xtmtest '(bind-func test_list_range_1
            (lambda ()
              (let ((res1 (range 3 8))
                    (res2 (range 1 10 3)))
                (println res1)
                (println res2)
                (= (nth res1 4)
                   (nth res2 2)))))

         (test_list_range_1) 1)

(xtmtest '(bind-func test_list_range_2
            (lambda ()
              (let ((list1 (range 3. 14. 2.5))
                    (list2 (range 16.))
                    (res
                     (filter (lambda (x) (not (null? (member x list1))))
                             list2)))
                (println list1)
                (println res)
                (length res))))

         (test_list_range_2) 3)

;; foldl/foldr

(xtmtest '(bind-func test_foldl_1
            (lambda ()
              (let ((plus (lambda (a b) (+ a b)))
                    (lst (list 1 2 3 4)))
                (foldl plus 0 lst))))

         (test_foldl_1) 10)

(xtmtest '(bind-func test_foldl_2
            (lambda ()
              (let ((lst (range 10. 30.)))
                (foldl (lambda (a b)
                         (let ((x (+ a b)))
                           (if (= (% (convert (/ x 2.0) i64) 2) 0)
                               x
                               0.)))
                       0. lst))))

         (test_foldl_2) 57)

(xtmtest '(bind-func test_foldr_1
            (lambda ()
              (let ((lst (range 10.))
                    (fn (lambda (lower:double upper) (random lower upper)))
                    (res (foldr fn 10. lst)))
                res)))

         (test_foldr_1))

(xtmtest '(bind-func test_foldr_2
            (lambda ()
              (let ((lst (range 10))
                    (fn (lambda (a:i64 b) (cons a b)))
                    (res (foldr fn null lst)))
                (println res)
                (and (= (nth lst 4)
                        (nth res 4))
                     (= (nth lst 6)
                        (nth res 6))))))

         (test_foldr_2) 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; assoc lists

(bind-func test_assoc_1
  (lambda ()
    (let ((dict (list (Pair (String "Andrew") 40)
                      (Pair (String "Alison") 39)
                      (Pair (String "Ben") 30))))
      dict)))

(xtmtest '(bind-func test_assoc_2
            (lambda ()
              (let ((dict (test_assoc_1)))
                (println dict)
                (println "Ben is" (dict_get dict (String "Ben")) "years old")
                (println "Andrew is" (dict_get dict (String "Andrew")) "years old")
                void)))

         (test_assoc_2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; BTree

(xtmtest '(bind-func btree_test_1
            (lambda ()
              (let ((t1 (BTree_leaf 3))
                    (t2 (BTree_leaf 4))
                    (t3 (BTree 2 t1 t2))
                    (t4 (BTree 1 t3 null)))
                (println t4)
                t3)))

         (btree_test_1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; a maybe monad test
;;

(xtmtest-compile
 '(bind-type Maybe <i1,!a>))

;; Maybe's data constructor IS unit/return
;;
;; but really UNIT should take a single
;; arg, so it has type [Maybe*,!a]*
;; so we can override on arity as below
(xtmtest-compile
 '(bind-func Maybe:[Maybe:<i1,!a>*,!a]*
    (lambda (x)
      (let ((m (alloc)))
        (tset! m 0 #t)
        (tset! m 1 x)
        m))))

(xtmtest-compile
 '(bind-func bind:[Maybe:<i1,!b>*,Maybe:<i1,!a>*,[Maybe:<i1,!b>*,!a]*]*
    (lambda (m f)
      (if (tref m 0)
          (f (tref m 1))                           ;; true  Maybe
          (Maybe #f (tref m 1)))))) ;; false Maybe (nothing)

;; short-hand
;(constrain-genericfunc
; bind
; $[i64,i64]*
; $[i32,i32]*
; $[float,float]*
; $[double,double]*)

;; long-hand
;; (constrain-generic
;;  bind
;;  [Maybe:<i1,i64>*,Maybe:<i1,i64>*,[Maybe:<i1,i64>*,i64]*]*
;;  [Maybe:<i1,i32>*,Maybe:<i1,i32>*,[Maybe:<i1,i32>*,i32]*]*
;;  [Maybe:<i1,float>*,Maybe:<i1,float>*,[Maybe:<i1,float>*,float]*]*
;;  [Maybe:<i1,double>*,Maybe:<i1,double>*,[Maybe:<i1,double>*,double]*]*)

;; maybe multiply
(xtmtest-compile
 '(bind-func maybe_mul:[Maybe*,Maybe*,Maybe*]*
    (lambda (a b)
      (bind
       a (lambda (x)
           (bind
            b (lambda (y)
                (let ((z (* x y)))
                  ;; stop computation if result
                  ;; is greater than 50
                  (if (> z (convert 50))
                      (Maybe #f z)
                      (Maybe #t z))))))))))

(bind-macro
  "create a haskell style do syntax

but we'll use a let style form mlet for monadic-let---bad name :("
  (mlet . args)
  (letrec ((f (lambda (xs body)
                (if (null? xs) body
                    `(bind ,(cadar xs)
                           (lambda (,(caar xs))
                             ,(f (cdr xs) body)))))))
    (f (car args) (cadr args))))

;; which makes maybe_mul considerably more readable
(xtmtest-compile
 '(bind-func maybe_mul:[Maybe*,Maybe*,Maybe*]*
    (lambda (a b)
      (mlet ((x a)
             (y b))
            (let ((z (* x y)))
              ;; stop computation if result
              ;; is greater than 50
              (if (> z (convert 50))
                  (Maybe #f z)
                  (Maybe #t z)))))))

(xtmtest-compile
 '(bind-func maybe_print_i64
    (lambda (x:i64)
      (let ((w (printf "%lld\n" x)))
        (if (>= w 0)
            (Maybe #t x)
            (Maybe #f x))))))

(xtmtest '(bind-func maybe_test
            (lambda (w:i64)
              (let ((x (Maybe w))
                    (y (Maybe 5))
                    (z (Maybe 2))
                    (result (maybe_mul x (maybe_mul y z))))
                ;;(bind result Maybe:[Maybe:<i1,i64>*,i64]*)
                (bind result Maybe:[Maybe{i64}*,i64]*)
                (bind (Maybe 5) (lambda (x) (Maybe (* x x))))
                (bind (Maybe 6.0) (lambda (x) (Maybe (* x x))))
                (bind (Maybe 5) (lambda (x) (Maybe (* x x))))
                (bind result maybe_print_i64)
                void)))

         (maybe_test 3))

(call-as-xtlang (maybe_test 4))
;; but NOT 60
(call-as-xtlang (maybe_test 6))
;; and of course 20 is ok!
(call-as-xtlang (maybe_test 2))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; type expansion
;;

(xtmtest-compile '(bind-type TypeA <!a,!a>))
(xtmtest-compile '(bind-type TypeB <TypeA{!a}*,!a>))
(xtmtest-compile '(bind-type TypeC <TypeA*,!a>))
(xtmtest-compile '(bind-type TypeD <!a,[!b,!a]*,!b>))

(xtmtest '(bind-func test_exp2
            (lambda ()
              (let ((a:TypeA{i64}* (alloc))
                    (b:TypeB{i64}* (alloc))
                    (c:TypeC{i64,i32}* (alloc))
                    (d:TypeD{float,double}* (alloc)))
                d)))

         (test_exp2))

(xtmtest-compile
 '(bind-func gen_exp:[!a,[!a,!b]*,!b]*
    (lambda (f x)
      (f x))))

(xtmtest-compile
 '(bind-func test_gen_e
    (lambda ()
      (let ((f (lambda (x) (i64tod x))))
        (gen_exp:$[double,i64]* f 2)))))

;; (bind-func test_gen_list
;;   (lambda ()
;;     (let ((lst (list gen_exp:$[i32,i64]* gen_exp:$[i32,i64]*)))
;;       lst)))

(xtmtest-compile
 '(bind-func gen_exp:[!a,!a,!a,!a]*
    (lambda (x y z)
      (* x y z))))

;; (bind-func test_gen_list2
;;   (lambda ()
;;     (let ((lst (list gen_exp:$[i32]* gen_exp:$[i32]*)))
;;       lst)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; generic overloading
;;
(xtmtest-compile
 '(bind-func gen_sqr:[!a,!a]*
    (lambda (x)
      (* x x))))

(xtmtest-compile
 '(bind-func gen_sqr:[Pair*,Pair*]*
    (lambda (x)
      (Pair (* (first x) (first x))
            (* (second x) (second x))))))

(xtmtest-compile
 '(bind-func gen_sqr:[List*,List*]*
    (lambda (lst)
      (map (lambda (x) (gen_sqr x)) lst))))

(xtmtest '(bind-func gen_sqr_test
            (lambda ()
              (println (gen_sqr 2)
                       (gen_sqr 3.0)
                       (gen_sqr (Pair 4.0 5.0))
                       (gen_sqr (list 6 7 8)))))

         (gen_sqr_test))


(xtmtest '(bind-func test_point_1
            (lambda ()
              (let ((pt (Point 9 4)))
                (+ (first pt)
                   (second pt)))))

         (test_point_1) 13)

(xtmtest '(bind-func test_point_2
            (lambda ()
              (let ((pt1 (Point 9 4))
                    (pt2 (Point .3 .6)))
                (+ (convert (+ (first pt1)
                               (second pt1)))
                   (+ (first pt2)
                      (second pt2))))))

         (test_point_2) 13.9)

;; this currently hangs during compilation
;; (xtmtest '(bind-func test_list_ptr
;;             (lambda ()
;;               (let ((lst_ptr:List** (alloc 2)))
;;                 (pset! lst_ptr 0 (list 1 2 3))
;;                 (pset! lst_ptr 1 (list 4 5 6))
;;                 (nth (pref lst_ptr 1) 1))))

;;          (test_list_ptr) 5)

(xtmtest '(bind-func test_list_ptr_2
            (lambda ()
              (letz ((lst_ptr:List{i64}** (alloc 2)))
                (pset! lst_ptr 0 (list 1 2 3))
                (pset! lst_ptr 1 (list 4 5 6))
                (nth (pref lst_ptr 1) 1))))

         (test_list_ptr_2) 5)

(xtmtest '(bind-func test_copy_list
            (lambda ()
              (letz ((l1 (list 1 2 3))
                     (l2 (copy l1)))
                (equal l1 l2))))

         (test_copy_list) 1)

(xtmtest '(bind-func test_nth_tail
            (lambda ()
              (let ((lst (list 1 2 3)))
                (nth_tail lst -3)
                (length (nth_tail lst 6)))))

         (test_nth_tail) 0)

;; (xtmtest '(bind-func test_nth_tailr
;;             (lambda ()
;;               (let ((lst (list 1 2 3)))
;;                 (nth_tailr lst -3)
;;                 (length (nth_tailr lst 6)))))

;;          (test_nth_tailr) 0)

;; (xtmtest '(bind-func test_nth_tail_both
;;             (lambda ()
;;               (let ((lst (list 1 2 3)))
;;                 (equal (nth_tail lst 1)
;;                        (nth_tailr lst 1)))))

;;          (test_nth_tail_both) 1)

(xtmtest '(bind-func test_list_take
            (lambda ()
              (let ((lst (list 1 2 3)))
                (equal (take lst 2)
                       (list 1 2)))))

         (test_list_take) 1)

(xtmtest '(bind-func test_list_take_2
            (lambda ()
              (let ((lst (list 1 2 3)))
                (length (take lst 1000)))))

         (test_list_take_2) 3)

(xtmtest '(bind-func test_list_drop
            (lambda ()
              (let ((lst (list 1 2 3)))
                (equal (drop lst 1)
                       (list 2 3)))))

         (test_list_drop) 1)

(xtmtest '(bind-func test_list_drop_2
            (lambda ()
              (let ((lst (list 1 2 3)))
                (length (drop lst 1000)))))

         (test_list_drop_2) 0)

;; dict

(xtmtest '(bind-func test_dict_get_1
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2))))
                (dict_get d (String "one")))))

         (test_dict_get_1) 1)

(xtmtest '(bind-func test_dict_get_2
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2))))
                (dict_get d (String "three")))))

         (test_dict_get_2) 0)

(xtmtest '(bind-func test_dict_set_1
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2)))
                    (oldval (dict_set d (String "two") 3)))
                (and (= oldval 2)
                     (= (dict_get d (String "two")) 3)))))

         (test_dict_set_1) 1)

(xtmtest '(bind-func test_dict_set_2
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2))))
                (dict_set d (String "three") 3)
                (println d)
                (and (= (length d) 3)
                     (= (dict_get d (String "three")) 3)))))

         (test_dict_set_2) 1)

;; this next one currently causes an infinite loop in the compiler

;; (xtmtest

;; (test-xtfunc (test_dict_set_3) 1))

(xtmtest '(bind-func test_dict_update_1
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2)))
                    (oldval (dict_update d
                                         (String "two")
                                         (lambda (v) (+ v 1)))))
                (and (= oldval 2)
                     (= (dict_get d (String "two")) 3)))))

         (test_dict_update_1) 1)

(xtmtest '(bind-func test_dict_update_2
            (lambda ()
              (let ((d (list (Pair (String "one") 1)
                             (Pair (String "two") 2))))
                (dict_update d (String "three") (lambda (v) (+ v 1)))
                (println d)
                (and (= (length d) 3)
                     (= (dict_get d (String "three")) 1)))))

         (test_dict_update_2) 1)

(xtmtest
 '(bind-func test_list_duplicates
    (lambda ()
      (let ((lst (list 1 2 3 3 4 6 6)))
        (equal (duplicates lst) (list 3 6)))))
 (test_list_duplicates) 1)

(xtmtest
 '(bind-func test_list_unique
    (lambda ()
      (let ((lst (list 1 2 3 3 4 6 6)))
        (equal (unique lst) (list 1 2 3 4 6)))))
 (test_list_unique) 1)

(xtmtest
 '(bind-func test_list_intersection
    (lambda ()
      (let ((l1 (list 1 2 3))
            (l2 (list 1 4 2)))
        (equal (intersection l1 l2) (list 1 2)))))
 (test_list_intersection) 1)

(xtmtest
 '(bind-func test_list_union
    (lambda ()
      (let ((l1 (list 1 2 3))
            (l2 (list 1 4 2)))
        ;; probably should do a sorted compare here
        (equal (union l1 l2) (list 3 1 4 2)))))
 (test_list_union) 1)

;; (xtmtest
;;  '(bind-func test_list_push_1
;;     (lambda ()
;;       (let ((l1 (list 1 2 3)))
;;         ;; probably should do a sorted compare here
;;         (push 42 l1)
;;         (car l1))))
;;  (test_list_push_1) 42)

(xtmtest
 '(bind-func test_list_pop_1
    (lambda ()
      (let ((l1 (list 42 1 2 3)))
        ;; probably should do a sorted compare here
        (pop l1))))
 (test_list_pop_1) 42)



;;;;;;;;;;;;;;;;;
;; BTree tests ;;
;;;;;;;;;;;;;;;;;

;; currently broken!

;; (bind-func test_tree_as_functor
;;   (lambda ()
;;     (let ((t (BTree 4 (BTree 2 (BTree_leaf 1) (BTree_leaf 3)) (BTree_leaf 5)))
;;           (t1 (BTree_map (lambda (x:i64) x) t)) ;; identity should return identity
;;           (f1 (lambda (x) (i64tod x)))
;;           (f2 (lambda (x:double) (* x x)))
;;           (t2 (BTree_map f2 (BTree_map f1 t)))
;;           (t3 (BTree_map (lambda (x) (f2 (f1 x))) t)))
;;       (println "functor passes identity test" t "==" t1)
;;       (println "functor passes composition test" t2 "==" t3)
;;       void)))

;; (xtmtest
;;  '(bind-func test_btree_1
;;     (lambda ()
;;       (let ((tree (BTree 42 (BTree_leaf 23) (BTree_leaf 2))))
;;         (BTree_walk_postorder tree (lambda (x) (println x))))))
;;  (test_btree_1))
