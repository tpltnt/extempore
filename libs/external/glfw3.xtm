;;; glfw3.xtm -- xtlang bindings for GLFW3

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libglfw, libGLEW

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/aot-cache/glfw3.xtm" 'quiet)
(sys:load-preload-check 'glfw3)
(define *xtmlib-glfw3-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmglfw3")

(bind-dylib libglfw3
  (cond ((string=? (sys:platform) "OSX")
         (list "libglfw.dylib" "libglfw3.dylib" "libglfw.3.dylib"))
        ((string=? (sys:platform) "Linux")
         (list "libglfw.so" "libglfw.so.3"))
        ((string=? (sys:platform) "Windows")
         "glfw3.dll")))

;; /*************************************************************************
;;  * GLFW 3.1 - www.glfw.org
;;  * A library for OpenGL, window and input
;;  *------------------------------------------------------------------------
;;  * Copyright (c) 2002-2006 Marcus Geelnard
;;  * Copyright (c) 2006-2010 Camilla Berglund <elmindreda@elmindreda.org>
;;  *
;;  * This software is provided 'as-is', without any express or implied
;;  * warranty. In no event will the authors be held liable for any damages
;;  * arising from the use of this software.
;;  *
;;  * Permission is granted to anyone to use this software for any purpose,
;;  * including commercial applications, and to alter it and redistribute it
;;  * freely, subject to the following restrictions:
;;  *
;;  * 1. The origin of this software must not be misrepresented; you must not
;;  *    claim that you wrote the original software. If you use this software
;;  *    in a product, an acknowledgment in the product documentation would
;;  *    be appreciated but is not required.
;;  *
;;  * 2. Altered source versions must be plainly marked as such, and must not
;;  *    be misrepresented as being the original software.
;;  *
;;  * 3. This notice may not be removed or altered from any source
;;  *    distribution.
;;  *
;;  *************************************************************************/

;; /*************************************************************************
;;  * Doxygen documentation
;;  *************************************************************************/

;; /*! @defgroup context Context handling
;;  *
;;  *  This is the reference documentation for context related functions.  For more
;;  *  information, see the @ref context.
;;  */
;; /*! @defgroup init Initialization, version and errors
;;  *
;;  *  This is the reference documentation for initialization and termination of
;;  *  the library, version management and error handling.  For more information,
;;  *  see the @ref intro.
;;  */
;; /*! @defgroup input Input handling
;;  *
;;  *  This is the reference documentation for input related functions and types.
;;  *  For more information, see the @ref input.
;;  */
;; /*! @defgroup monitor Monitor handling
;;  *
;;  *  This is the reference documentation for monitor related functions and types.
;;  *  For more information, see the @ref monitor.
;;  */
;; /*! @defgroup window Window handling
;;  *
;;  *  This is the reference documentation for window related functions and types,
;;  *  including creation, deletion and event polling.  For more information, see
;;  *  the @ref window.
;;  */

;; /*************************************************************************
;;  * Global definitions
;;  *************************************************************************/

;; /*************************************************************************
;;  * GLFW API tokens
;;  *************************************************************************/

;; /*! @name GLFW version macros
;;  *  @{ */
;; /*! @brief The major version number of the GLFW library.
;;  *
;;  *  This is incremented when the API is changed in non-compatible ways.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_MAJOR i32 3)
;; /*! @brief The minor version number of the GLFW library.
;;  *
;;  *  This is incremented when features are added to the API but it remains
;;  *  backward-compatible.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_MINOR i32 1)
;; /*! @brief The revision number of the GLFW library.
;;  *
;;  *  This is incremented when a bug fix release is made that does not contain any
;;  *  API changes.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_REVISION i32 0)
;; /*! @} */

;; /*! @name Key and button actions
;;  *  @{ */
;; /*! @brief The key or mouse button was released.
;;  *
;;  *  The key or mouse button was released.
;;  *
;;  *  @ingroup input
;;  */
(bind-val GLFW_RELEASE i32 0)
;; /*! @brief The key or mouse button was pressed.
;;  *
;;  *  The key or mouse button was pressed.
;;  *
;;  *  @ingroup input
;;  */
(bind-val GLFW_PRESS i32 1)
;; /*! @brief The key was held down until it repeated.
;;  *
;;  *  The key was held down until it repeated.
;;  *
;;  *  @ingroup input
;;  */
(bind-val GLFW_REPEAT i32 2)
;; /*! @} */

;; /*! @defgroup keys Keyboard keys
;;  *
;;  *  See [key input](@ref input_key) for how these are used.
;;  *
;;  *  These key codes are inspired by the _USB HID Usage Tables v1.12_ (p. 53-60),
;;  *  but re-arranged to map to 7-bit ASCII for printable keys (function keys are
;;  *  put in the 256+ range).
;;  *
;;  *  The naming of the key codes follow these rules:
;;  *   - The US keyboard layout is used
;;  *   - Names of printable alpha-numeric characters are used (e.g. "A", "R",
;;  *     "3", etc.)
;;  *   - For non-alphanumeric characters, Unicode:ish names are used (e.g.
;;  *     "COMMA", "LEFT_SQUARE_BRACKET", etc.). Note that some names do not
;;  *     correspond to the Unicode standard (usually for brevity)
;;  *   - Keys that lack a clear US mapping are named "WORLD_x"
;;  *   - For non-printable keys, custom names are used (e.g. "F4",
;;  *     "BACKSPACE", etc.)
;;  *
;;  *  @ingroup input
;;  *  @{
;;  */

;; /* The unknown key */
(bind-val GLFW_KEY_UNKNOWN i32 -1)

;; /* Printable keys */
(bind-val GLFW_KEY_SPACE i32 32)
(bind-val GLFW_KEY_APOSTROPHE i32 39)
(bind-val GLFW_KEY_COMMA i32 44)
(bind-val GLFW_KEY_MINUS i32 45)
(bind-val GLFW_KEY_PERIOD i32 46)
(bind-val GLFW_KEY_SLASH i32 47)
(bind-val GLFW_KEY_0 i32 48)
(bind-val GLFW_KEY_1 i32 49)
(bind-val GLFW_KEY_2 i32 50)
(bind-val GLFW_KEY_3 i32 51)
(bind-val GLFW_KEY_4 i32 52)
(bind-val GLFW_KEY_5 i32 53)
(bind-val GLFW_KEY_6 i32 54)
(bind-val GLFW_KEY_7 i32 55)
(bind-val GLFW_KEY_8 i32 56)
(bind-val GLFW_KEY_9 i32 57)
(bind-val GLFW_KEY_SEMICOLON i32 59)
(bind-val GLFW_KEY_EQUAL i32 61)
(bind-val GLFW_KEY_A i32 65)
(bind-val GLFW_KEY_B i32 66)
(bind-val GLFW_KEY_C i32 67)
(bind-val GLFW_KEY_D i32 68)
(bind-val GLFW_KEY_E i32 69)
(bind-val GLFW_KEY_F i32 70)
(bind-val GLFW_KEY_G i32 71)
(bind-val GLFW_KEY_H i32 72)
(bind-val GLFW_KEY_I i32 73)
(bind-val GLFW_KEY_J i32 74)
(bind-val GLFW_KEY_K i32 75)
(bind-val GLFW_KEY_L i32 76)
(bind-val GLFW_KEY_M i32 77)
(bind-val GLFW_KEY_N i32 78)
(bind-val GLFW_KEY_O i32 79)
(bind-val GLFW_KEY_P i32 80)
(bind-val GLFW_KEY_Q i32 81)
(bind-val GLFW_KEY_R i32 82)
(bind-val GLFW_KEY_S i32 83)
(bind-val GLFW_KEY_T i32 84)
(bind-val GLFW_KEY_U i32 85)
(bind-val GLFW_KEY_V i32 86)
(bind-val GLFW_KEY_W i32 87)
(bind-val GLFW_KEY_X i32 88)
(bind-val GLFW_KEY_Y i32 89)
(bind-val GLFW_KEY_Z i32 90)
(bind-val GLFW_KEY_LEFT_BRACKET i32 91)
(bind-val GLFW_KEY_BACKSLASH i32 92)
(bind-val GLFW_KEY_RIGHT_BRACKET i32 93)
(bind-val GLFW_KEY_GRAVE_ACCENT i32 96)
(bind-val GLFW_KEY_WORLD_1 i32 161)
(bind-val GLFW_KEY_WORLD_2 i32 162)

;; /* Function keys */
(bind-val GLFW_KEY_ESCAPE i32 256)
(bind-val GLFW_KEY_ENTER i32 257)
(bind-val GLFW_KEY_TAB i32 258)
(bind-val GLFW_KEY_BACKSPACE i32 259)
(bind-val GLFW_KEY_INSERT i32 260)
(bind-val GLFW_KEY_DELETE i32 261)
(bind-val GLFW_KEY_RIGHT i32 262)
(bind-val GLFW_KEY_LEFT i32 263)
(bind-val GLFW_KEY_DOWN i32 264)
(bind-val GLFW_KEY_UP i32 265)
(bind-val GLFW_KEY_PAGE_UP i32 266)
(bind-val GLFW_KEY_PAGE_DOWN i32 267)
(bind-val GLFW_KEY_HOME i32 268)
(bind-val GLFW_KEY_END i32 269)
(bind-val GLFW_KEY_CAPS_LOCK i32 280)
(bind-val GLFW_KEY_SCROLL_LOCK i32 281)
(bind-val GLFW_KEY_NUM_LOCK i32 282)
(bind-val GLFW_KEY_PRINT_SCREEN i32 283)
(bind-val GLFW_KEY_PAUSE i32 284)
(bind-val GLFW_KEY_F1 i32 290)
(bind-val GLFW_KEY_F2 i32 291)
(bind-val GLFW_KEY_F3 i32 292)
(bind-val GLFW_KEY_F4 i32 293)
(bind-val GLFW_KEY_F5 i32 294)
(bind-val GLFW_KEY_F6 i32 295)
(bind-val GLFW_KEY_F7 i32 296)
(bind-val GLFW_KEY_F8 i32 297)
(bind-val GLFW_KEY_F9 i32 298)
(bind-val GLFW_KEY_F10 i32 299)
(bind-val GLFW_KEY_F11 i32 300)
(bind-val GLFW_KEY_F12 i32 301)
(bind-val GLFW_KEY_F13 i32 302)
(bind-val GLFW_KEY_F14 i32 303)
(bind-val GLFW_KEY_F15 i32 304)
(bind-val GLFW_KEY_F16 i32 305)
(bind-val GLFW_KEY_F17 i32 306)
(bind-val GLFW_KEY_F18 i32 307)
(bind-val GLFW_KEY_F19 i32 308)
(bind-val GLFW_KEY_F20 i32 309)
(bind-val GLFW_KEY_F21 i32 310)
(bind-val GLFW_KEY_F22 i32 311)
(bind-val GLFW_KEY_F23 i32 312)
(bind-val GLFW_KEY_F24 i32 313)
(bind-val GLFW_KEY_F25 i32 314)
(bind-val GLFW_KEY_KP_0 i32 320)
(bind-val GLFW_KEY_KP_1 i32 321)
(bind-val GLFW_KEY_KP_2 i32 322)
(bind-val GLFW_KEY_KP_3 i32 323)
(bind-val GLFW_KEY_KP_4 i32 324)
(bind-val GLFW_KEY_KP_5 i32 325)
(bind-val GLFW_KEY_KP_6 i32 326)
(bind-val GLFW_KEY_KP_7 i32 327)
(bind-val GLFW_KEY_KP_8 i32 328)
(bind-val GLFW_KEY_KP_9 i32 329)
(bind-val GLFW_KEY_KP_DECIMAL i32 330)
(bind-val GLFW_KEY_KP_DIVIDE i32 331)
(bind-val GLFW_KEY_KP_MULTIPLY i32 332)
(bind-val GLFW_KEY_KP_SUBTRACT i32 333)
(bind-val GLFW_KEY_KP_ADD i32 334)
(bind-val GLFW_KEY_KP_ENTER i32 335)
(bind-val GLFW_KEY_KP_EQUAL i32 336)
(bind-val GLFW_KEY_LEFT_SHIFT i32 340)
(bind-val GLFW_KEY_LEFT_CONTROL i32 341)
(bind-val GLFW_KEY_LEFT_ALT i32 342)
(bind-val GLFW_KEY_LEFT_SUPER i32 343)
(bind-val GLFW_KEY_RIGHT_SHIFT i32 344)
(bind-val GLFW_KEY_RIGHT_CONTROL i32 345)
(bind-val GLFW_KEY_RIGHT_ALT i32 346)
(bind-val GLFW_KEY_RIGHT_SUPER i32 347)
(bind-val GLFW_KEY_MENU i32 348)
(bind-val GLFW_KEY_LAST i32 348) ;; (call-as-xtlang GLFW_KEY_MENU)

;; /*! @} */

;; /*! @defgroup mods Modifier key flags
;;  *
;;  *  See [key input](@ref input_key) for how these are used.
;;  *
;;  *  @ingroup input
;;  *  @{ */

;; /*! @brief If this bit is set one or more Shift keys were held down.
;;  */
(bind-val GLFW_MOD_SHIFT i32 #x0001)
;; /*! @brief If this bit is set one or more Control keys were held down.
;;  */
(bind-val GLFW_MOD_CONTROL i32 #x0002)
;; /*! @brief If this bit is set one or more Alt keys were held down.
;;  */
(bind-val GLFW_MOD_ALT i32 #x0004)
;; /*! @brief If this bit is set one or more Super keys were held down.
;;  */
(bind-val GLFW_MOD_SUPER i32 #x0008)

;; /*! @} */

;; /*! @defgroup buttons Mouse buttons
;;  *
;;  *  See [mouse button input](@ref input_mouse_button) for how these are used.
;;  *
;;  *  @ingroup input
;;  *  @{ */
(bind-val GLFW_MOUSE_BUTTON_1 i32 0)
(bind-val GLFW_MOUSE_BUTTON_2 i32 1)
(bind-val GLFW_MOUSE_BUTTON_3 i32 2)
(bind-val GLFW_MOUSE_BUTTON_4 i32 3)
(bind-val GLFW_MOUSE_BUTTON_5 i32 4)
(bind-val GLFW_MOUSE_BUTTON_6 i32 5)
(bind-val GLFW_MOUSE_BUTTON_7 i32 6)
(bind-val GLFW_MOUSE_BUTTON_8 i32 7)
(bind-val GLFW_MOUSE_BUTTON_LAST i32 7) ;; (call-as-xtlang GLFW_MOUSE_BUTTON_8)
(bind-val GLFW_MOUSE_BUTTON_LEFT i32 0) ;; (call-as-xtlang GLFW_MOUSE_BUTTON_1)
(bind-val GLFW_MOUSE_BUTTON_RIGHT i32 1) ;; (call-as-xtlang GLFW_MOUSE_BUTTON_2)
(bind-val GLFW_MOUSE_BUTTON_MIDDLE i32 2) ;; (call-as-xtlang GLFW_MOUSE_BUTTON_3)
;; /*! @} */

;; /*! @defgroup joysticks Joysticks
;;  *
;;  *  See [joystick input](@ref joystick) for how these are used.
;;  *
;;  *  @ingroup input
;;  *  @{ */
(bind-val GLFW_JOYSTICK_1 i32 0)
(bind-val GLFW_JOYSTICK_2 i32 1)
(bind-val GLFW_JOYSTICK_3 i32 2)
(bind-val GLFW_JOYSTICK_4 i32 3)
(bind-val GLFW_JOYSTICK_5 i32 4)
(bind-val GLFW_JOYSTICK_6 i32 5)
(bind-val GLFW_JOYSTICK_7 i32 6)
(bind-val GLFW_JOYSTICK_8 i32 7)
(bind-val GLFW_JOYSTICK_9 i32 8)
(bind-val GLFW_JOYSTICK_10 i32 9)
(bind-val GLFW_JOYSTICK_11 i32 10)
(bind-val GLFW_JOYSTICK_12 i32 11)
(bind-val GLFW_JOYSTICK_13 i32 12)
(bind-val GLFW_JOYSTICK_14 i32 13)
(bind-val GLFW_JOYSTICK_15 i32 14)
(bind-val GLFW_JOYSTICK_16 i32 15)
(bind-val GLFW_JOYSTICK_LAST i32 15) ;; (call-as-xtlang GLFW_JOYSTICK_16)
;; /*! @} */

;; /*! @defgroup errors Error codes
;;  *
;;  *  See [error handling](@ref error_handling) for how these are used.
;;  *
;;  *  @ingroup init
;;  *  @{ */
;; /*! @brief GLFW has not been initialized.
;;  *
;;  *  This occurs if a GLFW function was called that may not be called unless the
;;  *  library is [initialized](@ref intro_init).
;;  *
;;  *  @par Analysis
;;  *  Application programmer error.  Initialize GLFW before calling any function
;;  *  that requires initialization.
;;  */
(bind-val GLFW_NOT_INITIALIZED i32 #x00010001)
;; /*! @brief No context is current for this thread.
;;  *
;;  *  This occurs if a GLFW function was called that needs and operates on the
;;  *  current OpenGL or OpenGL ES context but no context is current on the calling
;;  *  thread.  One such function is @ref glfwSwapInterval.
;;  *
;;  *  @par Analysis
;;  *  Application programmer error.  Ensure a context is current before calling
;;  *  functions that require a current context.
;;  */
(bind-val GLFW_NO_CURRENT_CONTEXT i32 #x00010002)
;; /*! @brief One of the arguments to the function was an invalid enum value.
;;  *
;;  *  One of the arguments to the function was an invalid enum value, for example
;;  *  requesting [GLFW_RED_BITS](@ref window_hints_fb) with @ref
;;  *  glfwGetWindowAttrib.
;;  *
;;  *  @par Analysis
;;  *  Application programmer error.  Fix the offending call.
;;  */
(bind-val GLFW_INVALID_ENUM i32 #x00010003)
;; /*! @brief One of the arguments to the function was an invalid value.
;;  *
;;  *  One of the arguments to the function was an invalid value, for example
;;  *  requesting a non-existent OpenGL or OpenGL ES version like 2.7.
;;  *
;;  *  Requesting a valid but unavailable OpenGL or OpenGL ES version will instead
;;  *  result in a @ref GLFW_VERSION_UNAVAILABLE error.
;;  *
;;  *  @par Analysis
;;  *  Application programmer error.  Fix the offending call.
;;  */
(bind-val GLFW_INVALID_VALUE i32 #x00010004)
;; /*! @brief A memory allocation failed.
;;  *
;;  *  A memory allocation failed.
;;  *
;;  *  @par Analysis
;;  *  A bug in GLFW or the underlying operating system.  Report the bug to our
;;  *  [issue tracker](https://github.com/glfw/glfw/issues).
;;  */
(bind-val GLFW_OUT_OF_MEMORY i32 #x00010005)
;; /*! @brief GLFW could not find support for the requested client API on the
;;  *  system.
;;  *
;;  *  GLFW could not find support for the requested client API on the system.
;;  *
;;  *  @par Analysis
;;  *  The installed graphics driver does not support the requested client API, or
;;  *  does not support it via the chosen context creation backend.  Below are
;;  *  a few examples.
;;  *
;;  *  @par
;;  *  Some pre-installed Windows graphics drivers do not support OpenGL.  AMD only
;;  *  supports OpenGL ES via EGL, while Nvidia and Intel only supports it via
;;  *  a WGL or GLX extension.  OS X does not provide OpenGL ES at all.  The Mesa
;;  *  EGL, OpenGL and OpenGL ES libraries do not interface with the Nvidia binary
;;  *  driver.
;;  */
(bind-val GLFW_API_UNAVAILABLE i32 #x00010006)
;; /*! @brief The requested OpenGL or OpenGL ES version is not available.
;;  *
;;  *  The requested OpenGL or OpenGL ES version (including any requested profile
;;  *  or context option) is not available on this machine.
;;  *
;;  *  @par Analysis
;;  *  The machine does not support your requirements.  If your application is
;;  *  sufficiently flexible, downgrade your requirements and try again.
;;  *  Otherwise, inform the user that their machine does not match your
;;  *  requirements.
;;  *
;;  *  @par
;;  *  Future invalid OpenGL and OpenGL ES versions, for example OpenGL 4.8 if 5.0
;;  *  comes out before the 4.x series gets that far, also fail with this error and
;;  *  not @ref GLFW_INVALID_VALUE, because GLFW cannot know what future versions
;;  *  will exist.
;;  */
(bind-val GLFW_VERSION_UNAVAILABLE i32 #x00010007)
;; /*! @brief A platform-specific error occurred that does not match any of the
;;  *  more specific categories.
;;  *
;;  *  A platform-specific error occurred that does not match any of the more
;;  *  specific categories.
;;  *
;;  *  @par Analysis
;;  *  A bug in GLFW or the underlying operating system.  Report the bug to our
;;  *  [issue tracker](https://github.com/glfw/glfw/issues).
;;  */
(bind-val GLFW_PLATFORM_ERROR i32 #x00010008)
;; /*! @brief The requested format is not supported or available.
;;  *
;;  *  If emitted during window creation, the requested pixel format is not
;;  *  supported.
;;  *
;;  *  If emitted when querying the clipboard, the contents of the clipboard could
;;  *  not be converted to the requested format.
;;  *
;;  *  @par Analysis
;;  *  If emitted during window creation, one or more
;;  *  [hard constraints](@ref window_hints_hard) did not match any of the
;;  *  available pixel formats.  If your application is sufficiently flexible,
;;  *  downgrade your requirements and try again.  Otherwise, inform the user that
;;  *  their machine does not match your requirements.
;;  *
;;  *  @par
;;  *  If emitted when querying the clipboard, ignore the error or report it to
;;  *  the user, as appropriate.
;;  */
(bind-val GLFW_FORMAT_UNAVAILABLE i32 #x00010009)
;; /*! @} */

(bind-val GLFW_FOCUSED i32 #x00020001)
(bind-val GLFW_ICONIFIED i32 #x00020002)
(bind-val GLFW_RESIZABLE i32 #x00020003)
(bind-val GLFW_VISIBLE i32 #x00020004)
(bind-val GLFW_DECORATED i32 #x00020005)
(bind-val GLFW_AUTO_ICONIFY i32 #x00020006)
(bind-val GLFW_FLOATING i32 #x00020007)

(bind-val GLFW_RED_BITS i32 #x00021001)
(bind-val GLFW_GREEN_BITS i32 #x00021002)
(bind-val GLFW_BLUE_BITS i32 #x00021003)
(bind-val GLFW_ALPHA_BITS i32 #x00021004)
(bind-val GLFW_DEPTH_BITS i32 #x00021005)
(bind-val GLFW_STENCIL_BITS i32 #x00021006)
(bind-val GLFW_ACCUM_RED_BITS i32 #x00021007)
(bind-val GLFW_ACCUM_GREEN_BITS i32 #x00021008)
(bind-val GLFW_ACCUM_BLUE_BITS i32 #x00021009)
(bind-val GLFW_ACCUM_ALPHA_BITS i32 #x0002100A)
(bind-val GLFW_AUX_BUFFERS i32 #x0002100B)
(bind-val GLFW_STEREO i32 #x0002100C)
(bind-val GLFW_SAMPLES i32 #x0002100D)
(bind-val GLFW_SRGB_CAPABLE i32 #x0002100E)
(bind-val GLFW_REFRESH_RATE i32 #x0002100F)
(bind-val GLFW_DOUBLEBUFFER i32 #x00021010)

(bind-val GLFW_CLIENT_API i32 #x00022001)
(bind-val GLFW_CONTEXT_VERSION_MAJOR i32 #x00022002)
(bind-val GLFW_CONTEXT_VERSION_MINOR i32 #x00022003)
(bind-val GLFW_CONTEXT_REVISION i32 #x00022004)
(bind-val GLFW_CONTEXT_ROBUSTNESS i32 #x00022005)
(bind-val GLFW_OPENGL_FORWARD_COMPAT i32 #x00022006)
(bind-val GLFW_OPENGL_DEBUG_CONTEXT i32 #x00022007)
(bind-val GLFW_OPENGL_PROFILE i32 #x00022008)
(bind-val GLFW_CONTEXT_RELEASE_BEHAVIOR i32 #x00022009)

(bind-val GLFW_OPENGL_API i32 #x00030001)
(bind-val GLFW_OPENGL_ES_API i32 #x00030002)

(bind-val GLFW_NO_ROBUSTNESS i32 0)
(bind-val GLFW_NO_RESET_NOTIFICATION i32 #x00031001)
(bind-val GLFW_LOSE_CONTEXT_ON_RESET i32 #x00031002)

(bind-val GLFW_OPENGL_ANY_PROFILE i32 0)
(bind-val GLFW_OPENGL_CORE_PROFILE i32 #x00032001)
(bind-val GLFW_OPENGL_COMPAT_PROFILE i32 #x00032002)

(bind-val GLFW_CURSOR i32 #x00033001)
(bind-val GLFW_STICKY_KEYS i32 #x00033002)
(bind-val GLFW_STICKY_MOUSE_BUTTONS i32 #x00033003)

(bind-val GLFW_CURSOR_NORMAL i32 #x00034001)
(bind-val GLFW_CURSOR_HIDDEN i32 #x00034002)
(bind-val GLFW_CURSOR_DISABLED i32 #x00034003)

(bind-val GLFW_ANY_RELEASE_BEHAVIOR i32 0)
(bind-val GLFW_RELEASE_BEHAVIOR_FLUSH i32 #x00035001)
(bind-val GLFW_RELEASE_BEHAVIOR_NONE i32 #x00035002)

;; /*! @defgroup shapes Standard cursor shapes
;;  *
;;  *  See [standard cursor creation](@ref cursor_standard) for how these are used.
;;  *
;;  *  @ingroup input
;;  *  @{ */

;; /*! @brief The regular arrow cursor shape.
;;  *
;;  *  The regular arrow cursor.
;;  */
(bind-val GLFW_ARROW_CURSOR i32 #x00036001)
;; /*! @brief The text input I-beam cursor shape.
;;  *
;;  *  The text input I-beam cursor shape.
;;  */
(bind-val GLFW_IBEAM_CURSOR i32 #x00036002)
;; /*! @brief The crosshair shape.
;;  *
;;  *  The crosshair shape.
;;  */
(bind-val GLFW_CROSSHAIR_CURSOR i32 #x00036003)
;; /*! @brief The hand shape.
;;  *
;;  *  The hand shape.
;;  */
(bind-val GLFW_HAND_CURSOR i32 #x00036004)
;; /*! @brief The horizontal resize arrow shape.
;;  *
;;  *  The horizontal resize arrow shape.
;;  */
(bind-val GLFW_HRESIZE_CURSOR i32 #x00036005)
;; /*! @brief The vertical resize arrow shape.
;;  *
;;  *  The vertical resize arrow shape.
;;  */
(bind-val GLFW_VRESIZE_CURSOR i32 #x00036006)
;; /*! @} */

(bind-val GLFW_CONNECTED i32 #x00040001)
(bind-val GLFW_DISCONNECTED i32 #x00040002)

(bind-val GLFW_DONT_CARE i32 -1)


;; /*************************************************************************
;;  * GLFW API types
;;  *************************************************************************/

;; /*! @brief Client API function pointer type.
;;  *
;;  *  Generic function pointer used for returning client API function pointers
;;  *  without forcing a cast from a regular pointer.
;;  *
;;  *  @ingroup context
;;  */
(bind-alias GLFWglproc [void]*)

;; /*! @brief Opaque monitor object.
;;  *
;;  *  Opaque monitor object.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-alias GLFWmonitor i8)

;; /*! @brief Opaque window object.
;;  *
;;  *  Opaque window object.
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindow i8)
;; /*! @brief Opaque cursor object.
;;  *
;;  *  Opaque cursor object.
;;  *
;;  *  @ingroup cursor
;;  */
(bind-alias GLFWcursor i8)

;; /*! @brief The function signature for error callbacks.
;;  *
;;  *  This is the function signature for error callback functions.
;;  *
;;  *  @param[in] error An [error code](@ref errors).
;;  *  @param[in] description A UTF-8 encoded string describing the error.
;;  *
;;  *  @sa glfwSetErrorCallback
;;  *
;;  *  @ingroup init
;;  */
(bind-alias GLFWerrorfun [void,i32,i8*]*)

;; /*! @brief The function signature for window position callbacks.
;;  *
;;  *  This is the function signature for window position callback functions.
;;  *
;;  *  @param[in] window The window that was moved.
;;  *  @param[in] xpos The new x-coordinate, in screen coordinates, of the
;;  *  upper-left corner of the client area of the window.
;;  *  @param[in] ypos The new y-coordinate, in screen coordinates, of the
;;  *  upper-left corner of the client area of the window.
;;  *
;;  *  @sa glfwSetWindowPosCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowposfun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for window resize callbacks.
;;  *
;;  *  This is the function signature for window size callback functions.
;;  *
;;  *  @param[in] window The window that was resized.
;;  *  @param[in] width The new width, in screen coordinates, of the window.
;;  *  @param[in] height The new height, in screen coordinates, of the window.
;;  *
;;  *  @sa glfwSetWindowSizeCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowsizefun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for window close callbacks.
;;  *
;;  *  This is the function signature for window close callback functions.
;;  *
;;  *  @param[in] window The window that the user attempted to close.
;;  *
;;  *  @sa glfwSetWindowCloseCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowclosefun [void,GLFWwindow*]*)

;; /*! @brief The function signature for window content refresh callbacks.
;;  *
;;  *  This is the function signature for window refresh callback functions.
;;  *
;;  *  @param[in] window The window whose content needs to be refreshed.
;;  *
;;  *  @sa glfwSetWindowRefreshCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowrefreshfun [void,GLFWwindow*]*)

;; /*! @brief The function signature for window focus/defocus callbacks.
;;  *
;;  *  This is the function signature for window focus callback functions.
;;  *
;;  *  @param[in] window The window that gained or lost input focus.
;;  *  @param[in] focused `GL_TRUE` if the window was given input focus, or
;;  *  `GL_FALSE` if it lost it.
;;  *
;;  *  @sa glfwSetWindowFocusCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowfocusfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for window iconify/restore callbacks.
;;  *
;;  *  This is the function signature for window iconify/restore callback
;;  *  functions.
;;  *
;;  *  @param[in] window The window that was iconified or restored.
;;  *  @param[in] iconified `GL_TRUE` if the window was iconified, or `GL_FALSE`
;;  *  if it was restored.
;;  *
;;  *  @sa glfwSetWindowIconifyCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowiconifyfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for framebuffer resize callbacks.
;;  *
;;  *  This is the function signature for framebuffer resize callback
;;  *  functions.
;;  *
;;  *  @param[in] window The window whose framebuffer was resized.
;;  *  @param[in] width The new width, in pixels, of the framebuffer.
;;  *  @param[in] height The new height, in pixels, of the framebuffer.
;;  *
;;  *  @sa glfwSetFramebufferSizeCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWframebuffersizefun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for mouse button callbacks.
;;  *
;;  *  This is the function signature for mouse button callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] button The [mouse button](@ref buttons) that was pressed or
;;  *  released.
;;  *  @param[in] action One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *  @param[in] mods Bit field describing which [modifier keys](@ref mods) were
;;  *  held down.
;;  *
;;  *  @sa glfwSetMouseButtonCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWmousebuttonfun [void,GLFWwindow*,i32,i32,i32]*)

;; /*! @brief The function signature for cursor position callbacks.
;;  *
;;  *  This is the function signature for cursor position callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] xpos The new x-coordinate, in screen coordinates, of the cursor.
;;  *  @param[in] ypos The new y-coordinate, in screen coordinates, of the cursor.
;;  *
;;  *  @sa glfwSetCursorPosCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcursorposfun [void,GLFWwindow*,double,double]*)

;; /*! @brief The function signature for cursor enter/leave callbacks.
;;  *
;;  *  This is the function signature for cursor enter/leave callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] entered `GL_TRUE` if the cursor entered the window's client
;;  *  area, or `GL_FALSE` if it left it.
;;  *
;;  *  @sa glfwSetCursorEnterCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcursorenterfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for scroll callbacks.
;;  *
;;  *  This is the function signature for scroll callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] xoffset The scroll offset along the x-axis.
;;  *  @param[in] yoffset The scroll offset along the y-axis.
;;  *
;;  *  @sa glfwSetScrollCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWscrollfun [void,GLFWwindow*,double,double]*)

;; /*! @brief The function signature for keyboard key callbacks.
;;  *
;;  *  This is the function signature for keyboard key callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] key The [keyboard key](@ref keys) that was pressed or released.
;;  *  @param[in] scancode The system-specific scancode of the key.
;;  *  @param[in] action `GLFW_PRESS`, `GLFW_RELEASE` or `GLFW_REPEAT`.
;;  *  @param[in] mods Bit field describing which [modifier keys](@ref mods) were
;;  *  held down.
;;  *
;;  *  @sa glfwSetKeyCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWkeyfun [void,GLFWwindow*,i32,i32,i32,i32]*)

;; /*! @brief The function signature for Unicode character callbacks.
;;  *
;;  *  This is the function signature for Unicode character callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] codepoint The Unicode code point of the character.
;;  *
;;  *  @sa glfwSetCharCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcharfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for Unicode character with modifiers
;;  *  callbacks.
;;  *
;;  *  This is the function signature for Unicode character with modifiers callback
;;  *  functions.  It is called for each input character, regardless of what
;;  *  modifier keys are held down.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] codepoint The Unicode code point of the character.
;;  *  @param[in] mods Bit field describing which [modifier keys](@ref mods) were
;;  *  held down.
;;  *
;;  *  @sa glfwSetCharModsCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcharmodsfun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for file drop callbacks.
;;  *
;;  *  This is the function signature for file drop callbacks.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] count The number of dropped files.
;;  *  @param[in] names The UTF-8 encoded path names of the dropped files.
;;  *
;;  *  @sa glfwSetDropCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWdropfun [void,GLFWwindow*,i32,i8**]*)

;; /*! @brief The function signature for monitor configuration callbacks.
;;  *
;;  *  This is the function signature for monitor configuration callback functions.
;;  *
;;  *  @param[in] monitor The monitor that was connected or disconnected.
;;  *  @param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`.
;;  *
;;  *  @sa glfwSetMonitorCallback
;;  *
;;  *  @ingroup monitor
;;  */
(bind-alias GLFWmonitorfun [void,GLFWmonitor*,i32]*)

;; width 0
;; height 1
;; redBits 2
;; greenBits 3
;; blueBits 4
;; refreshRate 5
(bind-alias GLFWvidmode <i32,i32,i32,i32,i32,i32>)

;; red 0
;; green 1
;; blue 2
;; size 3
(bind-alias GLFWgammaramp <i16,i16,i16,i32>)

;; width 0
;; height 1
;; pixels 2
(bind-type GLFWimage <i32,i32,i8*>)

;; /*************************************************************************
;;  * GLFW API functions
;;  *************************************************************************/

;; /*! @brief Initializes the GLFW library.
;;  *
;;  *  This function initializes the GLFW library.  Before most GLFW functions can
;;  *  be used, GLFW must be initialized, and before an application terminates GLFW
;;  *  should be terminated in order to free any resources allocated during or
;;  *  after initialization.
;;  *
;;  *  If this function fails, it calls @ref glfwTerminate before returning.  If it
;;  *  succeeds, you should call @ref glfwTerminate before the application exits.
;;  *
;;  *  Additional calls to this function after successful initialization but before
;;  *  termination will return `GL_TRUE` immediately.
;;  *
;;  *  @return `GL_TRUE` if successful, or `GL_FALSE` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @remarks __OS X:__ This function will change the current directory of the
;;  *  application to the `Contents/Resources` subdirectory of the application's
;;  *  bundle, if present.  This can be disabled with a
;;  *  [compile-time option](@ref compile_options_osx).
;;  *
;;  *  @remarks __X11:__ If the `LC_CTYPE` category of the current locale is set to
;;  *  `"C"` then the environment's locale will be applied to that category.  This
;;  *  is done because character input will not function when `LC_CTYPE` is set to
;;  *  `"C"`.  If another locale was set before this function was called, it will
;;  *  be left untouched.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref intro_init
;;  *  @sa glfwTerminate
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwInit [i32]*)

;; /*! @brief Terminates the GLFW library.
;;  *
;;  *  This function destroys all remaining windows and cursors, restores any
;;  *  modified gamma ramps and frees any other allocated resources.  Once this
;;  *  function is called, you must again call @ref glfwInit successfully before
;;  *  you will be able to use most GLFW functions.
;;  *
;;  *  If GLFW has been successfully initialized, this function should be called
;;  *  before the application exits.  If initialization fails, there is no need to
;;  *  call this function, as it is called by @ref glfwInit before it returns
;;  *  failure.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @warning No window's context may be current on another thread when this
;;  *  function is called.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref intro_init
;;  *  @sa glfwInit
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwTerminate [void]*)

;; /*! @brief Retrieves the version of the GLFW library.
;;  *
;;  *  This function retrieves the major, minor and revision numbers of the GLFW
;;  *  library.  It is intended for when you are using GLFW as a shared library and
;;  *  want to ensure that you are using the minimum required version.
;;  *
;;  *  Any or all of the version arguments may be `NULL`.  This function always
;;  *  succeeds.
;;  *
;;  *  @param[out] major Where to store the major version number, or `NULL`.
;;  *  @param[out] minor Where to store the minor version number, or `NULL`.
;;  *  @param[out] rev Where to store the revision number, or `NULL`.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref intro_version
;;  *  @sa glfwGetVersionString
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwGetVersion [void,i32*,i32*,i32*]*)

;; /*! @brief Returns a string describing the compile-time configuration.
;;  *
;;  *  This function returns the compile-time generated
;;  *  [version string](@ref intro_version_string) of the GLFW library binary.  It
;;  *  describes the version, platform, compiler and any platform-specific
;;  *  compile-time options.
;;  *
;;  *  __Do not use the version string__ to parse the GLFW library version.  The
;;  *  @ref glfwGetVersion function already provides the version of the running
;;  *  library binary.
;;  *
;;  *  This function always succeeds.
;;  *
;;  *  @return The GLFW version string.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned string is static and compile-time generated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref intro_version
;;  *  @sa glfwGetVersion
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwGetVersionString [i8*]*)

;; /*! @brief Sets the error callback.
;;  *
;;  *  This function sets the error callback, which is called with an error code
;;  *  and a human-readable description each time a GLFW error occurs.
;;  *
;;  *  The error callback is called on the thread where the error occurred.  If you
;;  *  are using GLFW from multiple threads, your error callback needs to be
;;  *  written accordingly.
;;  *
;;  *  Because the description string may have been generated specifically for that
;;  *  error, it is not guaranteed to be valid after the callback has returned.  If
;;  *  you wish to use it after the callback returns, you need to make a copy.
;;  *
;;  *  Once set, the error callback remains set even after the library has been
;;  *  terminated.
;;  *
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref error_handling
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwSetErrorCallback [GLFWerrorfun,GLFWerrorfun]*)

;; /*! @brief Returns the currently connected monitors.
;;  *
;;  *  This function returns an array of handles for all currently connected
;;  *  monitors.
;;  *
;;  *  @param[out] count Where to store the number of monitors in the returned
;;  *  array.  This is set to zero if an error occurred.
;;  *  @return An array of monitor handles, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned array is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is guaranteed to be valid only until the monitor configuration
;;  *  changes or the library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_monitors
;;  *  @sa @ref monitor_event
;;  *  @sa glfwGetPrimaryMonitor
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitors [GLFWmonitor**,i32*]*)

;; /*! @brief Returns the primary monitor.
;;  *
;;  *  This function returns the primary monitor.  This is usually the monitor
;;  *  where elements like the Windows task bar or the OS X menu bar is located.
;;  *
;;  *  @return The primary monitor, or `NULL` if an [error](@ref error_handling)
;;  *  occurred.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_monitors
;;  *  @sa glfwGetMonitors
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetPrimaryMonitor [GLFWmonitor*]*)

;; /*! @brief Returns the position of the monitor's viewport on the virtual screen.
;;  *
;;  *  This function returns the position, in screen coordinates, of the upper-left
;;  *  corner of the specified monitor.
;;  *
;;  *  Any or all of the position arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` position arguments will be set to zero.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] xpos Where to store the monitor x-coordinate, or `NULL`.
;;  *  @param[out] ypos Where to store the monitor y-coordinate, or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_properties
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorPos [void,GLFWmonitor*,i32*,i32*]*)

;; /*! @brief Returns the physical size of the monitor.
;;  *
;;  *  This function returns the size, in millimetres, of the display area of the
;;  *  specified monitor.
;;  *
;;  *  Some systems do not provide accurate monitor size information, either
;;  *  because the monitor
;;  *  [EDID](https://en.wikipedia.org/wiki/Extended_display_identification_data)
;;  *  data is incorrect or because the driver does not report it accurately.
;;  *
;;  *  Any or all of the size arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` size arguments will be set to zero.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] widthMM Where to store the width, in millimetres, of the
;;  *  monitor's display area, or `NULL`.
;;  *  @param[out] heightMM Where to store the height, in millimetres, of the
;;  *  monitor's display area, or `NULL`.
;;  *
;;  *  @remarks __Windows:__ The OS calculates the returned physical size from the
;;  *  current resolution and system DPI instead of querying the monitor EDID data.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_properties
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorPhysicalSize [void,GLFWmonitor*,i32*,i32*]*)

;; /*! @brief Returns the name of the specified monitor.
;;  *
;;  *  This function returns a human-readable name, encoded as UTF-8, of the
;;  *  specified monitor.  The name typically reflects the make and model of the
;;  *  monitor and is not guaranteed to be unique among the connected monitors.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The UTF-8 encoded name of the monitor, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned string is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified monitor is disconnected or the
;;  *  library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_properties
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorName [i8*,GLFWmonitor*]*)

;; /*! @brief Sets the monitor configuration callback.
;;  *
;;  *  This function sets the monitor configuration callback, or removes the
;;  *  currently set callback.  This is called when a monitor is connected to or
;;  *  disconnected from the system.
;;  *
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @bug __X11:__ This callback is not yet called on monitor configuration
;;  *  changes.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_event
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetMonitorCallback [GLFWmonitorfun,GLFWmonitorfun]*)

;; /*! @brief Returns the available video modes for the specified monitor.
;;  *
;;  *  This function returns an array of all video modes supported by the specified
;;  *  monitor.  The returned array is sorted in ascending order, first by color
;;  *  bit depth (the sum of all channel depths) and then by resolution area (the
;;  *  product of width and height).
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] count Where to store the number of video modes in the returned
;;  *  array.  This is set to zero if an error occurred.
;;  *  @return An array of video modes, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned array is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified monitor is disconnected, this
;;  *  function is called again for that monitor or the library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_modes
;;  *  @sa glfwGetVideoMode
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Changed to return an array of modes for a specific monitor.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetVideoModes [GLFWvidmode*,GLFWmonitor*,i32*]*)

;; /*! @brief Returns the current mode of the specified monitor.
;;  *
;;  *  This function returns the current video mode of the specified monitor.  If
;;  *  you have created a full screen window for that monitor, the return value
;;  *  will depend on whether that window is iconified.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The current mode of the monitor, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned array is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified monitor is disconnected or the
;;  *  library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_modes
;;  *  @sa glfwGetVideoModes
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwGetDesktopMode`.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetVideoMode [GLFWvidmode*,GLFWmonitor*]*)

;; /*! @brief Generates a gamma ramp and sets it for the specified monitor.
;;  *
;;  *  This function generates a 256-element gamma ramp from the specified exponent
;;  *  and then calls @ref glfwSetGammaRamp with it.
;;  *
;;  *  @param[in] monitor The monitor whose gamma ramp to set.
;;  *  @param[in] gamma The desired exponent.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_gamma
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetGamma [void,GLFWmonitor*,float]*)

;; /*! @brief Returns the current gamma ramp for the specified monitor.
;;  *
;;  *  This function returns the current gamma ramp of the specified monitor.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The current gamma ramp, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned structure and its arrays are allocated and freed by GLFW.  You
;;  *  should not free them yourself.  They are valid until the specified monitor
;;  *  is disconnected, this function is called again for that monitor or the
;;  *  library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_gamma
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetGammaRamp [GLFWgammaramp*,GLFWmonitor*]*)

;; /*! @brief Sets the current gamma ramp for the specified monitor.
;;  *
;;  *  This function sets the current gamma ramp for the specified monitor.  The
;;  *  original gamma ramp for that monitor is saved by GLFW the first time this
;;  *  function is called and is restored by @ref glfwTerminate.
;;  *
;;  *  @param[in] monitor The monitor whose gamma ramp to set.
;;  *  @param[in] ramp The gamma ramp to use.
;;  *
;;  *  @note Gamma ramp sizes other than 256 are not supported by all hardware.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The specified gamma ramp is copied before this function returns.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref monitor_gamma
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetGammaRamp [void,GLFWmonitor*,GLFWgammaramp*]*)

;; /*! @brief Resets all window hints to their default values.
;;  *
;;  *  This function resets all window hints to their
;;  *  [default values](@ref window_hints_values).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_hints
;;  *  @sa glfwWindowHint
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwDefaultWindowHints [void]*)

;; /*! @brief Sets the specified window hint to the desired value.
;;  *
;;  *  This function sets hints for the next call to @ref glfwCreateWindow.  The
;;  *  hints, once set, retain their values until changed by a call to @ref
;;  *  glfwWindowHint or @ref glfwDefaultWindowHints, or until the library is
;;  *  terminated.
;;  *
;;  *  @param[in] target The [window hint](@ref window_hints) to set.
;;  *  @param[in] hint The new value of the window hint.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_hints
;;  *  @sa glfwDefaultWindowHints
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwOpenWindowHint`.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWindowHint [void,i32,i32]*)

;; /*! @brief Creates a window and its associated context.
;;  *
;;  *  This function creates a window and its associated OpenGL or OpenGL ES
;;  *  context.  Most of the options controlling how the window and its context
;;  *  should be created are specified with [window hints](@ref window_hints).
;;  *
;;  *  Successful creation does not change which context is current.  Before you
;;  *  can use the newly created context, you need to
;;  *  [make it current](@ref context_current).  For information about the `share`
;;  *  parameter, see @ref context_sharing.
;;  *
;;  *  The created window, framebuffer and context may differ from what you
;;  *  requested, as not all parameters and hints are
;;  *  [hard constraints](@ref window_hints_hard).  This includes the size of the
;;  *  window, especially for full screen windows.  To query the actual attributes
;;  *  of the created window, framebuffer and context, use queries like @ref
;;  *  glfwGetWindowAttrib and @ref glfwGetWindowSize.
;;  *
;;  *  To create a full screen window, you need to specify the monitor the window
;;  *  will cover.  If no monitor is specified, windowed mode will be used.  Unless
;;  *  you have a way for the user to choose a specific monitor, it is recommended
;;  *  that you pick the primary monitor.  For more information on how to query
;;  *  connected monitors, see @ref monitor_monitors.
;;  *
;;  *  For full screen windows, the specified size becomes the resolution of the
;;  *  window's _desired video mode_.  As long as a full screen window has input
;;  *  focus, the supported video mode most closely matching the desired video mode
;;  *  is set for the specified monitor.  For more information about full screen
;;  *  windows, including the creation of so called _windowed full screen_ or
;;  *  _borderless full screen_ windows, see @ref window_windowed_full_screen.
;;  *
;;  *  By default, newly created windows use the placement recommended by the
;;  *  window system.  To create the window at a specific position, make it
;;  *  initially invisible using the [GLFW_VISIBLE](@ref window_hints_wnd) window
;;  *  hint, set its [position](@ref window_pos) and then [show](@ref window_hide)
;;  *  it.
;;  *
;;  *  If a full screen window has input focus, the screensaver is prohibited from
;;  *  starting.
;;  *
;;  *  Window systems put limits on window sizes.  Very large or very small window
;;  *  dimensions may be overridden by the window system on creation.  Check the
;;  *  actual [size](@ref window_size) after creation.
;;  *
;;  *  The [swap interval](@ref buffer_swap) is not set during window creation and
;;  *  the initial value may vary depending on driver settings and defaults.
;;  *
;;  *  @param[in] width The desired width, in screen coordinates, of the window.
;;  *  This must be greater than zero.
;;  *  @param[in] height The desired height, in screen coordinates, of the window.
;;  *  This must be greater than zero.
;;  *  @param[in] title The initial, UTF-8 encoded window title.
;;  *  @param[in] monitor The monitor to use for full screen mode, or `NULL` to use
;;  *  windowed mode.
;;  *  @param[in] share The window whose context to share resources with, or `NULL`
;;  *  to not share resources.
;;  *  @return The handle of the created window, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @remarks __Windows:__ Window creation will fail if the Microsoft GDI
;;  *  software OpenGL implementation is the only one available.
;;  *
;;  *  @remarks __Windows:__ If the executable has an icon resource named
;;  *  `GLFW_ICON,` it will be set as the icon for the window.  If no such icon is
;;  *  present, the `IDI_WINLOGO` icon will be used instead.
;;  *
;;  *  @remarks __Windows:__ The context to share resources with may not be current
;;  *  on any other thread.
;;  *
;;  *  @remarks __OS X:__ The GLFW window has no icon, as it is not a document
;;  *  window, but the dock icon will be the same as the application bundle's icon.
;;  *  For more information on bundles, see the
;;  *  [Bundle Programming Guide](https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/)
;;  *  in the Mac Developer Library.
;;  *
;;  *  @remarks __OS X:__ The first time a window is created the menu bar is
;;  *  populated with common commands like Hide, Quit and About.  The About entry
;;  *  opens a minimal about dialog with information from the application's bundle.
;;  *  The menu bar can be disabled with a
;;  *  [compile-time option](@ref compile_options_osx).
;;  *
;;  *  @remarks __X11:__ There is no mechanism for setting the window icon yet.
;;  *
;;  *  @remarks __X11:__ Some window managers will not respect the placement of
;;  *  initially hidden windows.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_creation
;;  *  @sa glfwDestroyWindow
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwOpenWindow`.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwCreateWindow [GLFWwindow*,i32,i32,i8*,GLFWmonitor*,GLFWwindow*]*)

;; /*! @brief Destroys the specified window and its context.
;;  *
;;  *  This function destroys the specified window and its context.  On calling
;;  *  this function, no further callbacks will be called for that window.
;;  *
;;  *  If the context of the specified window is current on the main thread, it is
;;  *  detached before being destroyed.
;;  *
;;  *  @param[in] window The window to destroy.
;;  *
;;  *  @note The context of the specified window must not be current on any other
;;  *  thread when this function is called.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_creation
;;  *  @sa glfwCreateWindow
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwCloseWindow`.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwDestroyWindow [void,GLFWwindow*]*)

;; /*! @brief Checks the close flag of the specified window.
;;  *
;;  *  This function returns the value of the close flag of the specified window.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @return The value of the close flag.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.  Access is not synchronized.
;;  *
;;  *  @sa @ref window_close
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWindowShouldClose [i32,GLFWwindow*]*)

;; /*! @brief Sets the close flag of the specified window.
;;  *
;;  *  This function sets the value of the close flag of the specified window.
;;  *  This can be used to override the user's attempt to close the window, or
;;  *  to signal that it should be closed.
;;  *
;;  *  @param[in] window The window whose flag to change.
;;  *  @param[in] value The new value.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.  Access is not synchronized.
;;  *
;;  *  @sa @ref window_close
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowShouldClose [void,GLFWwindow*,i32]*)

;; /*! @brief Sets the title of the specified window.
;;  *
;;  *  This function sets the window title, encoded as UTF-8, of the specified
;;  *  window.
;;  *
;;  *  @param[in] window The window whose title to change.
;;  *  @param[in] title The UTF-8 encoded window title.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_title
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowTitle [void,GLFWwindow*,i8*]*)

;; /*! @brief Retrieves the position of the client area of the specified window.
;;  *
;;  *  This function retrieves the position, in screen coordinates, of the
;;  *  upper-left corner of the client area of the specified window.
;;  *
;;  *  Any or all of the position arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` position arguments will be set to zero.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[out] xpos Where to store the x-coordinate of the upper-left corner of
;;  *  the client area, or `NULL`.
;;  *  @param[out] ypos Where to store the y-coordinate of the upper-left corner of
;;  *  the client area, or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_pos
;;  *  @sa glfwSetWindowPos
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowPos [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Sets the position of the client area of the specified window.
;;  *
;;  *  This function sets the position, in screen coordinates, of the upper-left
;;  *  corner of the client area of the specified windowed mode window.  If the
;;  *  window is a full screen window, this function does nothing.
;;  *
;;  *  __Do not use this function__ to move an already visible window unless you
;;  *  have very good reasons for doing so, as it will confuse and annoy the user.
;;  *
;;  *  The window manager may put limits on what positions are allowed.  GLFW
;;  *  cannot and should not override these limits.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] xpos The x-coordinate of the upper-left corner of the client area.
;;  *  @param[in] ypos The y-coordinate of the upper-left corner of the client area.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_pos
;;  *  @sa glfwGetWindowPos
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowPos [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Retrieves the size of the client area of the specified window.
;;  *
;;  *  This function retrieves the size, in screen coordinates, of the client area
;;  *  of the specified window.  If you wish to retrieve the size of the
;;  *  framebuffer of the window in pixels, see @ref glfwGetFramebufferSize.
;;  *
;;  *  Any or all of the size arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` size arguments will be set to zero.
;;  *
;;  *  @param[in] window The window whose size to retrieve.
;;  *  @param[out] width Where to store the width, in screen coordinates, of the
;;  *  client area, or `NULL`.
;;  *  @param[out] height Where to store the height, in screen coordinates, of the
;;  *  client area, or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_size
;;  *  @sa glfwSetWindowSize
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowSize [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Sets the size of the client area of the specified window.
;;  *
;;  *  This function sets the size, in screen coordinates, of the client area of
;;  *  the specified window.
;;  *
;;  *  For full screen windows, this function selects and switches to the resolution
;;  *  closest to the specified size, without affecting the window's context.  As
;;  *  the context is unaffected, the bit depths of the framebuffer remain
;;  *  unchanged.
;;  *
;;  *  The window manager may put limits on what sizes are allowed.  GLFW cannot
;;  *  and should not override these limits.
;;  *
;;  *  @param[in] window The window to resize.
;;  *  @param[in] width The desired width of the specified window.
;;  *  @param[in] height The desired height of the specified window.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_size
;;  *  @sa glfwGetWindowSize
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowSize [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Retrieves the size of the framebuffer of the specified window.
;;  *
;;  *  This function retrieves the size, in pixels, of the framebuffer of the
;;  *  specified window.  If you wish to retrieve the size of the window in screen
;;  *  coordinates, see @ref glfwGetWindowSize.
;;  *
;;  *  Any or all of the size arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` size arguments will be set to zero.
;;  *
;;  *  @param[in] window The window whose framebuffer to query.
;;  *  @param[out] width Where to store the width, in pixels, of the framebuffer,
;;  *  or `NULL`.
;;  *  @param[out] height Where to store the height, in pixels, of the framebuffer,
;;  *  or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_fbsize
;;  *  @sa glfwSetFramebufferSizeCallback
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetFramebufferSize [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Retrieves the size of the frame of the window.
;;  *
;;  *  This function retrieves the size, in screen coordinates, of each edge of the
;;  *  frame of the specified window.  This size includes the title bar, if the
;;  *  window has one.  The size of the frame may vary depending on the
;;  *  [window-related hints](@ref window_hints_wnd) used to create it.
;;  *
;;  *  Because this function retrieves the size of each window frame edge and not
;;  *  the offset along a particular coordinate axis, the retrieved values will
;;  *  always be zero or positive.
;;  *
;;  *  Any or all of the size arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` size arguments will be set to zero.
;;  *
;;  *  @param[in] window The window whose frame size to query.
;;  *  @param[out] left Where to store the size, in screen coordinates, of the left
;;  *  edge of the window frame, or `NULL`.
;;  *  @param[out] top Where to store the size, in screen coordinates, of the top
;;  *  edge of the window frame, or `NULL`.
;;  *  @param[out] right Where to store the size, in screen coordinates, of the
;;  *  right edge of the window frame, or `NULL`.
;;  *  @param[out] bottom Where to store the size, in screen coordinates, of the
;;  *  bottom edge of the window frame, or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_size
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup window
;;  */
;; (bind-lib libglfw3 glfwGetWindowFrameSize [void,GLFWwindow*,i32*,i32*,i32*,i32*]*)

;; /*! @brief Iconifies the specified window.
;;  *
;;  *  This function iconifies (minimizes) the specified window if it was
;;  *  previously restored.  If the window is already iconified, this function does
;;  *  nothing.
;;  *
;;  *  If the specified window is a full screen window, the original monitor
;;  *  resolution is restored until the window is restored.
;;  *
;;  *  @param[in] window The window to iconify.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_iconify
;;  *  @sa glfwRestoreWindow
;;  *
;;  *  @since Added in GLFW 2.1.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwIconifyWindow [void,GLFWwindow*]*)

;; /*! @brief Restores the specified window.
;;  *
;;  *  This function restores the specified window if it was previously iconified
;;  *  (minimized).  If the window is already restored, this function does nothing.
;;  *
;;  *  If the specified window is a full screen window, the resolution chosen for
;;  *  the window is restored on the selected monitor.
;;  *
;;  *  @param[in] window The window to restore.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_iconify
;;  *  @sa glfwIconifyWindow
;;  *
;;  *  @since Added in GLFW 2.1.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwRestoreWindow [void,GLFWwindow*]*)

;; /*! @brief Makes the specified window visible.
;;  *
;;  *  This function makes the specified window visible if it was previously
;;  *  hidden.  If the window is already visible or is in full screen mode, this
;;  *  function does nothing.
;;  *
;;  *  @param[in] window The window to make visible.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_hide
;;  *  @sa glfwHideWindow
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwShowWindow [void,GLFWwindow*]*)

;; /*! @brief Hides the specified window.
;;  *
;;  *  This function hides the specified window if it was previously visible.  If
;;  *  the window is already hidden or is in full screen mode, this function does
;;  *  nothing.
;;  *
;;  *  @param[in] window The window to hide.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_hide
;;  *  @sa glfwShowWindow
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwHideWindow [void,GLFWwindow*]*)

;; /*! @brief Returns the monitor that the window uses for full screen mode.
;;  *
;;  *  This function returns the handle of the monitor that the specified window is
;;  *  in full screen on.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @return The monitor, or `NULL` if the window is in windowed mode or an error
;;  *  occurred.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_monitor
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowMonitor [GLFWmonitor*,GLFWwindow*]*)

;; /*! @brief Returns an attribute of the specified window.
;;  *
;;  *  This function returns the value of an attribute of the specified window or
;;  *  its OpenGL or OpenGL ES context.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] attrib The [window attribute](@ref window_attribs) whose value to
;;  *  return.
;;  *  @return The value of the attribute, or zero if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_attribs
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwGetWindowParam` and
;;  *  `glfwGetGLVersion`.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowAttrib [i32,GLFWwindow*,i32]*)

;; /*! @brief Sets the user pointer of the specified window.
;;  *
;;  *  This function sets the user-defined pointer of the specified window.  The
;;  *  current value is retained until the window is destroyed.  The initial value
;;  *  is `NULL`.
;;  *
;;  *  @param[in] window The window whose pointer to set.
;;  *  @param[in] pointer The new value.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.  Access is not synchronized.
;;  *
;;  *  @sa @ref window_userptr
;;  *  @sa glfwGetWindowUserPointer
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowUserPointer [void,GLFWwindow*,i8*]*)

;; /*! @brief Returns the user pointer of the specified window.
;;  *
;;  *  This function returns the current value of the user-defined pointer of the
;;  *  specified window.  The initial value is `NULL`.
;;  *
;;  *  @param[in] window The window whose pointer to return.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.  Access is not synchronized.
;;  *
;;  *  @sa @ref window_userptr
;;  *  @sa glfwSetWindowUserPointer
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowUserPointer [i8*,GLFWwindow*]*)

;; /*! @brief Sets the position callback for the specified window.
;;  *
;;  *  This function sets the position callback of the specified window, which is
;;  *  called when the window is moved.  The callback is provided with the screen
;;  *  position of the upper-left corner of the client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_pos
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowPosCallback [GLFWwindowposfun,GLFWwindow*,GLFWwindowposfun]*)

;; /*! @brief Sets the size callback for the specified window.
;;  *
;;  *  This function sets the size callback of the specified window, which is
;;  *  called when the window is resized.  The callback is provided with the size,
;;  *  in screen coordinates, of the client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_size
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowSizeCallback [GLFWwindowsizefun,GLFWwindow*,GLFWwindowsizefun]*)

;; /*! @brief Sets the close callback for the specified window.
;;  *
;;  *  This function sets the close callback of the specified window, which is
;;  *  called when the user attempts to close the window, for example by clicking
;;  *  the close widget in the title bar.
;;  *
;;  *  The close flag is set before this callback is called, but you can modify it
;;  *  at any time with @ref glfwSetWindowShouldClose.
;;  *
;;  *  The close callback is not triggered by @ref glfwDestroyWindow.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @remarks __OS X:__ Selecting Quit from the application menu will
;;  *  trigger the close callback for all windows.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_close
;;  *
;;  *  @since Added in GLFW 2.5.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowCloseCallback [GLFWwindowclosefun,GLFWwindow*,GLFWwindowclosefun]*)

;; /*! @brief Sets the refresh callback for the specified window.
;;  *
;;  *  This function sets the refresh callback of the specified window, which is
;;  *  called when the client area of the window needs to be redrawn, for example
;;  *  if the window has been exposed after having been covered by another window.
;;  *
;;  *  On compositing window systems such as Aero, Compiz or Aqua, where the window
;;  *  contents are saved off-screen, this callback may be called only very
;;  *  infrequently or never at all.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_refresh
;;  *
;;  *  @since Added in GLFW 2.5.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowRefreshCallback [GLFWwindowrefreshfun,GLFWwindow*,GLFWwindowrefreshfun]*)

;; /*! @brief Sets the focus callback for the specified window.
;;  *
;;  *  This function sets the focus callback of the specified window, which is
;;  *  called when the window gains or loses input focus.
;;  *
;;  *  After the focus callback is called for a window that lost input focus,
;;  *  synthetic key and mouse button release events will be generated for all such
;;  *  that had been pressed.  For more information, see @ref glfwSetKeyCallback
;;  *  and @ref glfwSetMouseButtonCallback.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_focus
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowFocusCallback [GLFWwindowfocusfun,GLFWwindow*,GLFWwindowfocusfun]*)

;; /*! @brief Sets the iconify callback for the specified window.
;;  *
;;  *  This function sets the iconification callback of the specified window, which
;;  *  is called when the window is iconified or restored.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_iconify
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowIconifyCallback [GLFWwindowiconifyfun,GLFWwindow*,GLFWwindowiconifyfun]*)

;; /*! @brief Sets the framebuffer resize callback for the specified window.
;;  *
;;  *  This function sets the framebuffer resize callback of the specified window,
;;  *  which is called when the framebuffer of the specified window is resized.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref window_fbsize
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetFramebufferSizeCallback [GLFWframebuffersizefun,GLFWwindow*,GLFWframebuffersizefun]*)

;; /*! @brief Processes all pending events.
;;  *
;;  *  This function processes only those events that are already in the event
;;  *  queue and then returns immediately.  Processing events will cause the window
;;  *  and input callbacks associated with those events to be called.
;;  *
;;  *  On some platforms, a window move, resize or menu operation will cause event
;;  *  processing to block.  This is due to how event processing is designed on
;;  *  those platforms.  You can use the
;;  *  [window refresh callback](@ref window_refresh) to redraw the contents of
;;  *  your window when necessary during such operations.
;;  *
;;  *  On some platforms, certain events are sent directly to the application
;;  *  without going through the event queue, causing callbacks to be called
;;  *  outside of a call to one of the event processing functions.
;;  *
;;  *  Event processing is not required for joystick input to work.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref events
;;  *  @sa glfwWaitEvents
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwPollEvents [void]*)

;; /*! @brief Waits until events are queued and processes them.
;;  *
;;  *  This function puts the calling thread to sleep until at least one event is
;;  *  available in the event queue.  Once one or more events are available,
;;  *  it behaves exactly like @ref glfwPollEvents, i.e. the events in the queue
;;  *  are processed and the function then returns immediately.  Processing events
;;  *  will cause the window and input callbacks associated with those events to be
;;  *  called.
;;  *
;;  *  Since not all events are associated with callbacks, this function may return
;;  *  without a callback having been called even if you are monitoring all
;;  *  callbacks.
;;  *
;;  *  On some platforms, a window move, resize or menu operation will cause event
;;  *  processing to block.  This is due to how event processing is designed on
;;  *  those platforms.  You can use the
;;  *  [window refresh callback](@ref window_refresh) to redraw the contents of
;;  *  your window when necessary during such operations.
;;  *
;;  *  On some platforms, certain callbacks may be called outside of a call to one
;;  *  of the event processing functions.
;;  *
;;  *  If no windows exist, this function returns immediately.  For synchronization
;;  *  of threads in applications that do not create windows, use your threading
;;  *  library of choice.
;;  *
;;  *  Event processing is not required for joystick input to work.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref events
;;  *  @sa glfwPollEvents
;;  *
;;  *  @since Added in GLFW 2.5.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWaitEvents [void]*)

;; /*! @brief Posts an empty event to the event queue.
;;  *
;;  *  This function posts an empty event from the current thread to the event
;;  *  queue, causing @ref glfwWaitEvents to return.
;;  *
;;  *  If no windows exist, this function returns immediately.  For synchronization
;;  *  of threads in applications that do not create windows, use your threading
;;  *  library of choice.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref events
;;  *  @sa glfwWaitEvents
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup window
;;  */
;; (bind-lib libglfw3 glfwPostEmptyEvent [void]*)

;; /*! @brief Returns the value of an input option for the specified window.
;;  *
;;  *  This function returns the value of an input option for the specified window.
;;  *  The mode must be one of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa glfwSetInputMode
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetInputMode [i32,GLFWwindow*,i32]*)

;; /*! @brief Sets an input option for the specified window.
;;  *
;;  *  This function sets an input mode option for the specified window.  The mode
;;  *  must be one of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *
;;  *  If the mode is `GLFW_CURSOR`, the value must be one of the following cursor
;;  *  modes:
;;  *  - `GLFW_CURSOR_NORMAL` makes the cursor visible and behaving normally.
;;  *  - `GLFW_CURSOR_HIDDEN` makes the cursor invisible when it is over the client
;;  *    area of the window but does not restrict the cursor from leaving.
;;  *  - `GLFW_CURSOR_DISABLED` hides and grabs the cursor, providing virtual
;;  *    and unlimited cursor movement.  This is useful for implementing for
;;  *    example 3D camera controls.
;;  *
;;  *  If the mode is `GLFW_STICKY_KEYS`, the value must be either `GL_TRUE` to
;;  *  enable sticky keys, or `GL_FALSE` to disable it.  If sticky keys are
;;  *  enabled, a key press will ensure that @ref glfwGetKey returns `GLFW_PRESS`
;;  *  the next time it is called even if the key had been released before the
;;  *  call.  This is useful when you are only interested in whether keys have been
;;  *  pressed but not when or in which order.
;;  *
;;  *  If the mode is `GLFW_STICKY_MOUSE_BUTTONS`, the value must be either
;;  *  `GL_TRUE` to enable sticky mouse buttons, or `GL_FALSE` to disable it.  If
;;  *  sticky mouse buttons are enabled, a mouse button press will ensure that @ref
;;  *  glfwGetMouseButton returns `GLFW_PRESS` the next time it is called even if
;;  *  the mouse button had been released before the call.  This is useful when you
;;  *  are only interested in whether mouse buttons have been pressed but not when
;;  *  or in which order.
;;  *
;;  *  @param[in] window The window whose input mode to set.
;;  *  @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *  @param[in] value The new value of the specified input mode.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa glfwGetInputMode
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwEnable` and `glfwDisable`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetInputMode [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Returns the last reported state of a keyboard key for the specified
;;  *  window.
;;  *
;;  *  This function returns the last state reported for the specified key to the
;;  *  specified window.  The returned state is one of `GLFW_PRESS` or
;;  *  `GLFW_RELEASE`.  The higher-level action `GLFW_REPEAT` is only reported to
;;  *  the key callback.
;;  *
;;  *  If the `GLFW_STICKY_KEYS` input mode is enabled, this function returns
;;  *  `GLFW_PRESS` the first time you call it for a key that was pressed, even if
;;  *  that key has already been released.
;;  *
;;  *  The key functions deal with physical keys, with [key tokens](@ref keys)
;;  *  named after their use on the standard US keyboard layout.  If you want to
;;  *  input text, use the Unicode character callback instead.
;;  *
;;  *  The [modifier key bit masks](@ref mods) are not key tokens and cannot be
;;  *  used with this function.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] key The desired [keyboard key](@ref keys).  `GLFW_KEY_UNKNOWN` is
;;  *  not a valid key for this function.
;;  *  @return One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_key
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetKey [i32,GLFWwindow*,i32]*)

;; /*! @brief Returns the last reported state of a mouse button for the specified
;;  *  window.
;;  *
;;  *  This function returns the last state reported for the specified mouse button
;;  *  to the specified window.  The returned state is one of `GLFW_PRESS` or
;;  *  `GLFW_RELEASE`.
;;  *
;;  *  If the `GLFW_STICKY_MOUSE_BUTTONS` input mode is enabled, this function
;;  *  `GLFW_PRESS` the first time you call it for a mouse button that was pressed,
;;  *  even if that mouse button has already been released.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] button The desired [mouse button](@ref buttons).
;;  *  @return One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_mouse_button
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetMouseButton [i32,GLFWwindow*,i32]*)

;; /*! @brief Retrieves the position of the cursor relative to the client area of
;;  *  the window.
;;  *
;;  *  This function returns the position of the cursor, in screen coordinates,
;;  *  relative to the upper-left corner of the client area of the specified
;;  *  window.
;;  *
;;  *  If the cursor is disabled (with `GLFW_CURSOR_DISABLED`) then the cursor
;;  *  position is unbounded and limited only by the minimum and maximum values of
;;  *  a `double`.
;;  *
;;  *  The coordinate can be converted to their integer equivalents with the
;;  *  `floor` function.  Casting directly to an integer type works for positive
;;  *  coordinates, but fails for negative ones.
;;  *
;;  *  Any or all of the position arguments may be `NULL`.  If an error occurs, all
;;  *  non-`NULL` position arguments will be set to zero.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[out] xpos Where to store the cursor x-coordinate, relative to the
;;  *  left edge of the client area, or `NULL`.
;;  *  @param[out] ypos Where to store the cursor y-coordinate, relative to the to
;;  *  top edge of the client area, or `NULL`.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_pos
;;  *  @sa glfwSetCursorPos
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwGetMousePos`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetCursorPos [void,GLFWwindow*,double*,double*]*)

;; /*! @brief Sets the position of the cursor, relative to the client area of the
;;  *  window.
;;  *
;;  *  This function sets the position, in screen coordinates, of the cursor
;;  *  relative to the upper-left corner of the client area of the specified
;;  *  window.  The window must have input focus.  If the window does not have
;;  *  input focus when this function is called, it fails silently.
;;  *
;;  *  __Do not use this function__ to implement things like camera controls.  GLFW
;;  *  already provides the `GLFW_CURSOR_DISABLED` cursor mode that hides the
;;  *  cursor, transparently re-centers it and provides unconstrained cursor
;;  *  motion.  See @ref glfwSetInputMode for more information.
;;  *
;;  *  If the cursor mode is `GLFW_CURSOR_DISABLED` then the cursor position is
;;  *  unconstrained and limited only by the minimum and maximum values of
;;  *  a `double`.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] xpos The desired x-coordinate, relative to the left edge of the
;;  *  client area.
;;  *  @param[in] ypos The desired y-coordinate, relative to the top edge of the
;;  *  client area.
;;  *
;;  *  @remarks __X11:__ Due to the asynchronous nature of a modern X desktop, it
;;  *  may take a moment for the window focus event to arrive.  This means you will
;;  *  not be able to set the cursor position directly after window creation.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_pos
;;  *  @sa glfwGetCursorPos
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwSetMousePos`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorPos [void,GLFWwindow*,double,double]*)

;; /*! @brief Creates a custom cursor.
;;  *
;;  *  Creates a new custom cursor image that can be set for a window with @ref
;;  *  glfwSetCursor.  The cursor can be destroyed with @ref glfwDestroyCursor.
;;  *  Any remaining cursors are destroyed by @ref glfwTerminate.
;;  *
;;  *  The pixels are 32-bit little-endian RGBA, i.e. eight bits per channel.  They
;;  *  are arranged canonically as packed sequential rows, starting from the
;;  *  top-left corner.
;;  *
;;  *  The cursor hotspot is specified in pixels, relative to the upper-left corner
;;  *  of the cursor image.  Like all other coordinate systems in GLFW, the X-axis
;;  *  points to the right and the Y-axis points down.
;;  *
;;  *  @param[in] image The desired cursor image.
;;  *  @param[in] xhot The desired x-coordinate, in pixels, of the cursor hotspot.
;;  *  @param[in] yhot The desired y-coordinate, in pixels, of the cursor hotspot.
;;  *
;;  *  @return The handle of the created cursor, or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The specified image data is copied before this function returns.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_object
;;  *  @sa glfwDestroyCursor
;;  *  @sa glfwCreateStandardCursor
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwCreateCursor [GLFWcursor*,GLFWimage*,i32,i32]*)

;; /*! @brief Creates a cursor with a standard shape.
;;  *
;;  *  Returns a cursor with a [standard shape](@ref shapes), that can be set for
;;  *  a window with @ref glfwSetCursor.
;;  *
;;  *  @param[in] shape One of the [standard shapes](@ref shapes).
;;  *
;;  *  @return A new cursor ready to use or `NULL` if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_object
;;  *  @sa glfwCreateCursor
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwCreateStandardCursor [GLFWcursor*,i32]*)

;; /*! @brief Destroys a cursor.
;;  *
;;  *  This function destroys a cursor previously created with @ref
;;  *  glfwCreateCursor.  Any remaining cursors will be destroyed by @ref
;;  *  glfwTerminate.
;;  *
;;  *  @param[in] cursor The cursor object to destroy.
;;  *
;;  *  @par Reentrancy
;;  *  This function may not be called from a callback.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_object
;;  *  @sa glfwCreateCursor
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwDestroyCursor [void,GLFWcursor*]*)

;; /*! @brief Sets the cursor for the window.
;;  *
;;  *  This function sets the cursor image to be used when the cursor is over the
;;  *  client area of the specified window.  The set cursor will only be visible
;;  *  when the [cursor mode](@ref cursor_mode) of the window is
;;  *  `GLFW_CURSOR_NORMAL`.
;;  *
;;  *  On some platforms, the set cursor may not be visible unless the window also
;;  *  has input focus.
;;  *
;;  *  @param[in] window The window to set the cursor for.
;;  *  @param[in] cursor The cursor to set, or `NULL` to switch back to the default
;;  *  arrow cursor.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_object
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwSetCursor [void,GLFWwindow*,GLFWcursor*]*)

;; /*! @brief Sets the key callback.
;;  *
;;  *  This function sets the key callback of the specified window, which is called
;;  *  when a key is pressed, repeated or released.
;;  *
;;  *  The key functions deal with physical keys, with layout independent
;;  *  [key tokens](@ref keys) named after their values in the standard US keyboard
;;  *  layout.  If you want to input text, use the
;;  *  [character callback](@ref glfwSetCharCallback) instead.
;;  *
;;  *  When a window loses input focus, it will generate synthetic key release
;;  *  events for all pressed keys.  You can tell these events from user-generated
;;  *  events by the fact that the synthetic ones are generated after the focus
;;  *  loss event has been processed, i.e. after the
;;  *  [window focus callback](@ref glfwSetWindowFocusCallback) has been called.
;;  *
;;  *  The scancode of a key is specific to that platform or sometimes even to that
;;  *  machine.  Scancodes are intended to allow users to bind keys that don't have
;;  *  a GLFW key token.  Such keys have `key` set to `GLFW_KEY_UNKNOWN`, their
;;  *  state is not saved and so it cannot be queried with @ref glfwGetKey.
;;  *
;;  *  Sometimes GLFW needs to generate synthetic key events, in which case the
;;  *  scancode may be zero.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new key callback, or `NULL` to remove the currently
;;  *  set callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_key
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetKeyCallback [GLFWkeyfun,GLFWwindow*,GLFWkeyfun]*)

;; /*! @brief Sets the Unicode character callback.
;;  *
;;  *  This function sets the character callback of the specified window, which is
;;  *  called when a Unicode character is input.
;;  *
;;  *  The character callback is intended for Unicode text input.  As it deals with
;;  *  characters, it is keyboard layout dependent, whereas the
;;  *  [key callback](@ref glfwSetKeyCallback) is not.  Characters do not map 1:1
;;  *  to physical keys, as a key may produce zero, one or more characters.  If you
;;  *  want to know whether a specific physical key was pressed or released, see
;;  *  the key callback instead.
;;  *
;;  *  The character callback behaves as system text input normally does and will
;;  *  not be called if modifier keys are held down that would prevent normal text
;;  *  input on that platform, for example a Super (Command) key on OS X or Alt key
;;  *  on Windows.  There is a
;;  *  [character with modifiers callback](@ref glfwSetCharModsCallback) that
;;  *  receives these events.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_char
;;  *
;;  *  @since Added in GLFW 2.4.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCharCallback [GLFWcharfun,GLFWwindow*,GLFWcharfun]*)

;; /*! @brief Sets the Unicode character with modifiers callback.
;;  *
;;  *  This function sets the character with modifiers callback of the specified
;;  *  window, which is called when a Unicode character is input regardless of what
;;  *  modifier keys are used.
;;  *
;;  *  The character with modifiers callback is intended for implementing custom
;;  *  Unicode character input.  For regular Unicode text input, see the
;;  *  [character callback](@ref glfwSetCharCallback).  Like the character
;;  *  callback, the character with modifiers callback deals with characters and is
;;  *  keyboard layout dependent.  Characters do not map 1:1 to physical keys, as
;;  *  a key may produce zero, one or more characters.  If you want to know whether
;;  *  a specific physical key was pressed or released, see the
;;  *  [key callback](@ref glfwSetKeyCallback) instead.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_char
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwSetCharModsCallback [GLFWcharmodsfun,GLFWwindow*,GLFWcharmodsfun]*)

;; /*! @brief Sets the mouse button callback.
;;  *
;;  *  This function sets the mouse button callback of the specified window, which
;;  *  is called when a mouse button is pressed or released.
;;  *
;;  *  When a window loses input focus, it will generate synthetic mouse button
;;  *  release events for all pressed mouse buttons.  You can tell these events
;;  *  from user-generated events by the fact that the synthetic ones are generated
;;  *  after the focus loss event has been processed, i.e. after the
;;  *  [window focus callback](@ref glfwSetWindowFocusCallback) has been called.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref input_mouse_button
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.  Updated callback signature.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetMouseButtonCallback [GLFWmousebuttonfun,GLFWwindow*,GLFWmousebuttonfun]*)

;; /*! @brief Sets the cursor position callback.
;;  *
;;  *  This function sets the cursor position callback of the specified window,
;;  *  which is called when the cursor is moved.  The callback is provided with the
;;  *  position, in screen coordinates, relative to the upper-left corner of the
;;  *  client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_pos
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwSetMousePosCallback`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorPosCallback [GLFWcursorposfun,GLFWwindow*,GLFWcursorposfun]*)

;; /*! @brief Sets the cursor enter/exit callback.
;;  *
;;  *  This function sets the cursor boundary crossing callback of the specified
;;  *  window, which is called when the cursor enters or leaves the client area of
;;  *  the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref cursor_enter
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorEnterCallback [GLFWcursorenterfun,GLFWwindow*,GLFWcursorenterfun]*)

;; /*! @brief Sets the scroll callback.
;;  *
;;  *  This function sets the scroll callback of the specified window, which is
;;  *  called when a scrolling device is used, such as a mouse wheel or scrolling
;;  *  area of a touchpad.
;;  *
;;  *  The scroll callback receives all scrolling input, like that from a mouse
;;  *  wheel or a touchpad scrolling area.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new scroll callback, or `NULL` to remove the currently
;;  *  set callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref scrolling
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwSetMouseWheelCallback`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetScrollCallback [GLFWscrollfun,GLFWwindow*,GLFWscrollfun]*)

;; /*! @brief Sets the file drop callback.
;;  *
;;  *  This function sets the file drop callback of the specified window, which is
;;  *  called when one or more dragged files are dropped on the window.
;;  *
;;  *  Because the path array and its strings may have been generated specifically
;;  *  for that event, they are not guaranteed to be valid after the callback has
;;  *  returned.  If you wish to use them after the callback returns, you need to
;;  *  make a deep copy.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new file drop callback, or `NULL` to remove the
;;  *  currently set callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or the
;;  *  library had not been [initialized](@ref intro_init).
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref path_drop
;;  *
;;  *  @since Added in GLFW 3.1.
;;  *
;;  *  @ingroup input
;;  */
;; (bind-lib libglfw3 glfwSetDropCallback [GLFWdropfun,GLFWwindow*,GLFWdropfun]*)

;; /*! @brief Returns whether the specified joystick is present.
;;  *
;;  *  This function returns whether the specified joystick is present.
;;  *
;;  *  @param[in] joy The [joystick](@ref joysticks) to query.
;;  *  @return `GL_TRUE` if the joystick is present, or `GL_FALSE` otherwise.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref joystick
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwGetJoystickParam`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwJoystickPresent [i32,i32]*)

;; /*! @brief Returns the values of all axes of the specified joystick.
;;  *
;;  *  This function returns the values of all axes of the specified joystick.
;;  *  Each element in the array is a value between -1.0 and 1.0.
;;  *
;;  *  @param[in] joy The [joystick](@ref joysticks) to query.
;;  *  @param[out] count Where to store the number of axis values in the returned
;;  *  array.  This is set to zero if an error occurred.
;;  *  @return An array of axis values, or `NULL` if the joystick is not present.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned array is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified joystick is disconnected, this
;;  *  function is called again for that joystick or the library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref joystick_axis
;;  *
;;  *  @since Added in GLFW 3.0.  Replaces `glfwGetJoystickPos`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickAxes [float*,i32,i32*]*)

;; /*! @brief Returns the state of all buttons of the specified joystick.
;;  *
;;  *  This function returns the state of all buttons of the specified joystick.
;;  *  Each element in the array is either `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *
;;  *  @param[in] joy The [joystick](@ref joysticks) to query.
;;  *  @param[out] count Where to store the number of button states in the returned
;;  *  array.  This is set to zero if an error occurred.
;;  *  @return An array of button states, or `NULL` if the joystick is not present.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned array is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified joystick is disconnected, this
;;  *  function is called again for that joystick or the library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref joystick_button
;;  *
;;  *  @since Added in GLFW 2.2.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Changed to return a dynamic array.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickButtons [i8*,i32,i32*]*)

;; /*! @brief Returns the name of the specified joystick.
;;  *
;;  *  This function returns the name, encoded as UTF-8, of the specified joystick.
;;  *  The returned string is allocated and freed by GLFW.  You should not free it
;;  *  yourself.
;;  *
;;  *  @param[in] joy The [joystick](@ref joysticks) to query.
;;  *  @return The UTF-8 encoded name of the joystick, or `NULL` if the joystick
;;  *  is not present.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned string is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the specified joystick is disconnected, this
;;  *  function is called again for that joystick or the library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref joystick_name
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickName [i8*,i32]*)

;; /*! @brief Sets the clipboard to the specified string.
;;  *
;;  *  This function sets the system clipboard to the specified, UTF-8 encoded
;;  *  string.
;;  *
;;  *  @param[in] window The window that will own the clipboard contents.
;;  *  @param[in] string A UTF-8 encoded string.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The specified string is copied before this function returns.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref clipboard
;;  *  @sa glfwGetClipboardString
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetClipboardString [void,GLFWwindow*,i8*]*)

;; /*! @brief Returns the contents of the clipboard as a string.
;;  *
;;  *  This function returns the contents of the system clipboard, if it contains
;;  *  or is convertible to a UTF-8 encoded string.
;;  *
;;  *  @param[in] window The window that will request the clipboard contents.
;;  *  @return The contents of the clipboard as a UTF-8 encoded string, or `NULL`
;;  *  if an [error](@ref error_handling) occurred.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned string is allocated and freed by GLFW.  You should not free it
;;  *  yourself.  It is valid until the next call to @ref
;;  *  glfwGetClipboardString or @ref glfwSetClipboardString, or until the library
;;  *  is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref clipboard
;;  *  @sa glfwSetClipboardString
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetClipboardString [i8*,GLFWwindow*]*)

;; /*! @brief Returns the value of the GLFW timer.
;;  *
;;  *  This function returns the value of the GLFW timer.  Unless the timer has
;;  *  been set using @ref glfwSetTime, the timer measures time elapsed since GLFW
;;  *  was initialized.
;;  *
;;  *  The resolution of the timer is system dependent, but is usually on the order
;;  *  of a few micro- or nanoseconds.  It uses the highest-resolution monotonic
;;  *  time source on each supported platform.
;;  *
;;  *  @return The current value, in seconds, or zero if an
;;  *  [error](@ref error_handling) occurred.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.  Access is not synchronized.
;;  *
;;  *  @sa @ref time
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetTime [double]*)

;; /*! @brief Sets the GLFW timer.
;;  *
;;  *  This function sets the value of the GLFW timer.  It then continues to count
;;  *  up from that value.
;;  *
;;  *  @param[in] time The new value, in seconds.
;;  *
;;  *  @par Thread Safety
;;  *  This function may only be called from the main thread.
;;  *
;;  *  @sa @ref time
;;  *
;;  *  @since Added in GLFW 2.2.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetTime [void,double]*)

;; /*! @brief Makes the context of the specified window current for the calling
;;  *  thread.
;;  *
;;  *  This function makes the OpenGL or OpenGL ES context of the specified window
;;  *  current on the calling thread.  A context can only be made current on
;;  *  a single thread at a time and each thread can have only a single current
;;  *  context at a time.
;;  *
;;  *  By default, making a context non-current implicitly forces a pipeline flush.
;;  *  On machines that support `GL_KHR_context_flush_control`, you can control
;;  *  whether a context performs this flush by setting the
;;  *  [GLFW_CONTEXT_RELEASE_BEHAVIOR](@ref window_hints_ctx) window hint.
;;  *
;;  *  @param[in] window The window whose context to make current, or `NULL` to
;;  *  detach the current context.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref context_current
;;  *  @sa glfwGetCurrentContext
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwMakeContextCurrent [void,GLFWwindow*]*)

;; /*! @brief Returns the window whose context is current on the calling thread.
;;  *
;;  *  This function returns the window whose OpenGL or OpenGL ES context is
;;  *  current on the calling thread.
;;  *
;;  *  @return The window whose context is current, or `NULL` if no window's
;;  *  context is current.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref context_current
;;  *  @sa glfwMakeContextCurrent
;;  *
;;  *  @since Added in GLFW 3.0.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwGetCurrentContext [GLFWwindow*]*)

;; /*! @brief Swaps the front and back buffers of the specified window.
;;  *
;;  *  This function swaps the front and back buffers of the specified window.  If
;;  *  the swap interval is greater than zero, the GPU driver waits the specified
;;  *  number of screen updates before swapping the buffers.
;;  *
;;  *  @param[in] window The window whose buffers to swap.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref buffer_swap
;;  *  @sa glfwSwapInterval
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @par
;;  *  __GLFW 3:__ Added window handle parameter.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSwapBuffers [void,GLFWwindow*]*)

;; /*! @brief Sets the swap interval for the current context.
;;  *
;;  *  This function sets the swap interval for the current context, i.e. the
;;  *  number of screen updates to wait from the time @ref glfwSwapBuffers was
;;  *  called before swapping the buffers and returning.  This is sometimes called
;;  *  _vertical synchronization_, _vertical retrace synchronization_ or just
;;  *  _vsync_.
;;  *
;;  *  Contexts that support either of the `WGL_EXT_swap_control_tear` and
;;  *  `GLX_EXT_swap_control_tear` extensions also accept negative swap intervals,
;;  *  which allow the driver to swap even if a frame arrives a little bit late.
;;  *  You can check for the presence of these extensions using @ref
;;  *  glfwExtensionSupported.  For more information about swap tearing, see the
;;  *  extension specifications.
;;  *
;;  *  A context must be current on the calling thread.  Calling this function
;;  *  without a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.
;;  *
;;  *  @param[in] interval The minimum number of screen updates to wait for
;;  *  until the buffers are swapped by @ref glfwSwapBuffers.
;;  *
;;  *  @note This function is not called during window creation, leaving the swap
;;  *  interval set to whatever is the default on that platform.  This is done
;;  *  because some swap interval extensions used by GLFW do not allow the swap
;;  *  interval to be reset to zero once it has been set to a non-zero value.
;;  *
;;  *  @note Some GPU drivers do not honor the requested swap interval, either
;;  *  because of user settings that override the request or due to bugs in the
;;  *  driver.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref buffer_swap
;;  *  @sa glfwSwapBuffers
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwSwapInterval [void,i32]*)

;; /*! @brief Returns whether the specified extension is available.
;;  *
;;  *  This function returns whether the specified
;;  *  [API extension](@ref context_glext) is supported by the current OpenGL or
;;  *  OpenGL ES context.  It searches both for OpenGL and OpenGL ES extension and
;;  *  platform-specific context creation API extensions.
;;  *
;;  *  A context must be current on the calling thread.  Calling this function
;;  *  without a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.
;;  *
;;  *  As this functions retrieves and searches one or more extension strings each
;;  *  call, it is recommended that you cache its results if it is going to be used
;;  *  frequently.  The extension strings will not change during the lifetime of
;;  *  a context, so there is no danger in doing this.
;;  *
;;  *  @param[in] extension The ASCII encoded name of the extension.
;;  *  @return `GL_TRUE` if the extension is available, or `GL_FALSE` otherwise.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref context_glext
;;  *  @sa glfwGetProcAddress
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwExtensionSupported [i32,i8*]*)

;; /*! @brief Returns the address of the specified function for the current
;;  *  context.
;;  *
;;  *  This function returns the address of the specified
;;  *  [client API or extension function](@ref context_glext), if it is supported
;;  *  by the current context.
;;  *
;;  *  A context must be current on the calling thread.  Calling this function
;;  *  without a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.
;;  *
;;  *  @param[in] procname The ASCII encoded name of the function.
;;  *  @return The address of the function, or `NULL` if the function is
;;  *  unavailable or an [error](@ref error_handling) occurred.
;;  *
;;  *  @note The addresses of a given function is not guaranteed to be the same
;;  *  between contexts.
;;  *
;;  *  @par Pointer Lifetime
;;  *  The returned function pointer is valid until the context is destroyed or the
;;  *  library is terminated.
;;  *
;;  *  @par Thread Safety
;;  *  This function may be called from any thread.
;;  *
;;  *  @sa @ref context_glext
;;  *  @sa glfwExtensionSupported
;;  *
;;  *  @since Added in GLFW 1.0.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwGetProcAddress [GLFWglproc,i8*]*)

;; glfw3native.h

;; (bind-lib libglfw3 glfwGetGLXContext [GLXContext,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetX11Window [Window,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetX11Monitor [RROutput,GLFWmonitor*]*)
;; (bind-lib libglfw3 glfwGetX11Adapter [RRCrtc,GLFWmonitor*]*)
;; (bind-lib libglfw3 glfwGetX11Display [Display*]*)
;; (bind-lib libglfw3 glfwGetNSGLContext [id,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetCocoaWindow [id,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetCocoaMonitor [CGDirectDisplayID,GLFWmonitor*]*)
;; (bind-lib libglfw3 glfwGetWGLContext [HGLRC,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetWin32Monitor [i8*,GLFWmonitor*]*)
;; (bind-lib libglfw3 glfwGetWin32Adapter [i8*,GLFWmonitor*]*)
;; (bind-lib libglfw3 glfwGetEGLDisplay [EGLDisplay]*)
;; (bind-lib libglfw3 glfwGetEGLContext [EGLContext,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetEGLSurface [EGLSurface,GLFWwindow*]*)
;; (bind-lib libglfw3 glfwGetWin32Window [HWND,GLFWwindow*]*)

;; xtlang helper functions

(bind-func glfw_error_callback:GLFWerrorfun
  (lambda (err description)
    (printf "GLFW error %d: %s\n" err description)
    void))

(bind-func glfw_init
  (lambda ()
    (let ((res (glfwInit)))
      (if (= res 1)
          (begin
            (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
            res)
          res))))

(bind-func glfw_terminate
  (lambda ()
    (glfwTerminate)))

(bind-func glfw_print_version_string
  (lambda ()
    (printf "%s\n" (glfwGetVersionString))))

(bind-func glfw_create_fullscreen_window
  "creates a windowed fullscreen window (i.e. doesn't change video mode)"
  (let ((window_title:i8* (zalloc 128)))
    (lambda ()
      (sprintf window_title "Extempore OpenGL Window")
      (let ((monitor (glfwGetPrimaryMonitor))
            (vidmode (glfwGetVideoMode monitor))
            (width (tref vidmode 0))
            (height (tref vidmode 1))
            (res:GLFWwindow* null))
        ;; (glfwWindowHint GLFW_RED_BITS (tref vidmode 2))
        ;; (glfwWindowHint GLFW_GREEN_BITS (tref vidmode 3))
        ;; (glfwWindowHint GLFW_BLUE_BITS (tref vidmode 4))
        ;; (glfwWindowHint GLFW_REFRESH_RATE (tref vidmode 5))
        (glfwWindowHint GLFW_DECORATED 0)
        (set! res (glfwCreateWindow width height window_title null null))
        (glfwSetWindowPos res 0 0)
        res))))

(bind-func glfw_create_window
  (let ((window_title:i8* (zalloc 128)))
    (lambda (width height)
      (sprintf window_title "Extempore OpenGL Window")
      (glfwCreateWindow width height window_title null null))))

(bind-func glfw_create_interaction_window
  (let ((window_title:i8* (zalloc 128)))
    (lambda (width height)
      (sprintf window_title "Extempore OpenGL Window")
      (register_for_window_events)
      (glfwCreateWindow width height window_title null null))))

(bind-func glfw_window_should_close
  (lambda (window)
    (glfwWindowShouldClose window)))

(bind-func glfw_make_context_current
  (lambda (window)
    (glfwMakeContextCurrent window)))

(bind-func glfw_destroy_window
  (lambda (window:GLFWwindow*)
    (if (not (null? window))
        (glfwDestroyWindow window)
        (begin (printf "Error: Window pointer is NULL.\n")
               void))
    void))

(bind-func glfw_swap_buffers
  (lambda (window:GLFWwindow*)
    (glfwSwapBuffers window)))

(bind-func glfw_poll_events
  (lambda ()
    (glfwPollEvents)))

(bind-func glfw_print_video_mode_details
  (lambda (vidmode:GLFWvidmode*)
    (printf "      width: %i\n     height: %i\n    redBits: %i\n  greenBits: %i\n   blueBits: %i\nrefreshRate: %i\n"
            (tref vidmode 0)
            (tref vidmode 1)
            (tref vidmode 2)
            (tref vidmode 3)
            (tref vidmode 4)
            (tref vidmode 5))))

(bind-func glfw_print_primary_monitor_details
  (lambda ()
    (let ((monitor (glfwGetPrimaryMonitor)))
      (if (not (null? monitor))
          (glfw_print_video_mode_details (glfwGetVideoMode monitor))
          (printf "Error: Monitor pointer is NULL.\n")))))

(bind-func glfw_set_core_profile
  (lambda ()
    (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 2)
    (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 1)) ;; GL_TRUE
    (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_CORE_PROFILE)))

;; this doesn't work across all platforms - need to do more investigation
(bind-func glfw_set_compatibility_profile
  (lambda ()
    (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 1)
    (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 0)) ;; GL_FALSE
    (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_COMPAT_PROFILE)))

;; callbacks

(bind-func glfw_key_callback:GLFWkeyfun
  (lambda (window key scancode action mods)
    (printf "window: %p key: %d scancode: %d action: %d mods: %d\n"
            window key scancode action mods)
    void))

(bind-func glfw_char_callback:GLFWcharfun
  (lambda (window codepoint)
    (printf "window: %p codepoint: %c\n" window codepoint)
    void))

(bind-func glfw_window_position_callback:GLFWwindowposfun
  (lambda (window xpos ypos)
    (printf "window position x: %d y: %d\n" xpos ypos)
    void))

(bind-func glfw_window_focus_callback:GLFWwindowfocusfun
  (lambda (window focused)
    (if (= focused (convert 1)) ;; GL_TRUE
        (printf "window %p gained focus\n" window)
        (printf "window %p lost focus\n" window))
    void))

(bind-func glfw_cursor_position_callback:GLFWcursorposfun
  (lambda (window xpos ypos)
    (printf "cursor position x: %f y: %f\n" xpos ypos)
    void))

(bind-func glfw_mouse_button_callback:GLFWmousebuttonfun
  (lambda (window button action mods)
    (printf "window: %p button %d action %d mods %d\n" window button action mods)
    void))

(bind-func glfw_init_and_create_window
  (lambda (width height)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((window (glfw_create_window width height)))
      ;; the ShowWindow and SwapBuffers calls are necessary for
      ;; Windows, otherwise the context becomes unresponsive
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_compatibility_window
  (lambda (width height)
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_interaction_window
  (lambda (width height)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((window (glfw_create_interaction_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_interaction_compatibility_window
  (lambda (width height)
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_interaction_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_window
  (lambda ()
    (glfw_init)
    (glfw_set_core_profile)
    (let ((window (glfw_create_fullscreen_window)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_compatibility_window
  (lambda ()
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_fullscreen_window)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_get_framebuffer_width
  (lambda (window)
    (let ((width_ptr:i32* (salloc)))
      (glfwGetFramebufferSize window width_ptr null)
      (pref width_ptr 0))))

(bind-func glfw_get_framebuffer_height
  (lambda (window)
    (let ((height_ptr:i32* (salloc)))
      (glfwGetFramebufferSize window null height_ptr)
      (pref height_ptr 0))))

(bind-func glfw_get_pixel_ratio
  (lambda (window)
    (let ((ww:i32* (alloc))
          (wh:i32* (alloc))
          (fbw:i32* (alloc))
          (fbh:i32* (alloc)))
      (glfwGetWindowSize window ww wh)
      (glfwGetFramebufferSize window fbw fbh)
      (/ (convert fbw float) (convert ww float)))))

(impc:aot:insert-footer "xtmglfw3")
(define *xtmlib-glfw3-loaded* #t)
