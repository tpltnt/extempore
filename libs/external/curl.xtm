;;; curl.xtm -- libcurl bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcurl

;;; Commentary:

;; libcurl allows for for sending/recieving files over a network.
;; These bindings all use the 'easy interface' (see
;; http://curl.haxx.se/libcurl/)

;;; Code:

;; lib-loading config
(sys:load-preload-check 'curl)

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libcurl
  (cond ((string=? (sys:platform) "OSX")
         "libcurl.dylib")
        ((string=? (sys:platform) "Linux")
         "libcurl.so")
        ((string=? (sys:platform) "Windows")
         "libcurl.dll")))

(define *xtmlib-curl-loaded* #t)

;; the basic cURL 'object'
(bind-alias CURL i8*)

;; some important enums
(bind-alias CURLcode enum)
(bind-alias CURLoption enum)
(bind-alias CURLINFO enum)

;; CURLopt flags: these are reverse engineered from the CINIT macro in
;; curl.h, so they may be fragile!
(bind-val CURLOPT_FILE CURLoption 10001)
(bind-val CURLOPT_WRITEDATA CURLoption 10001) ;; alias for CURLOPT_FILE
(bind-val CURLOPT_URL CURLoption 10002)
(bind-val CURLOPT_PORT CURLoption 3)
(bind-val CURLOPT_PROXY CURLoption 10004)
(bind-val CURLOPT_USERPWD CURLoption 10005)
(bind-val CURLOPT_PROXYUSERPWD CURLoption 10006)
(bind-val CURLOPT_RANGE CURLoption 10007)
(bind-val CURLOPT_INFILE CURLoption 10009)
(bind-val CURLOPT_READDATA CURLoption 10009)  ;; alias for CURLOPT_INFILE
(bind-val CURLOPT_ERRORBUFFER CURLoption 10010)
(bind-val CURLOPT_WRITEFUNCTION CURLoption 20011)
(bind-val CURLOPT_READFUNCTION CURLoption 20012)

(bind-val CURLOPT_FOLLOWLOCATION CURLoption 52)
(bind-val CURLOPT_TIMEOUT CURLoption 13)
(bind-val CURLOPT_INFILESIZE CURLoption 14)
(bind-val CURLOPT_CONNECT_ONLY CURLoption 141)
(bind-val CURLOPT_USERAGENT CURLoption 10018)
(bind-val CURLOPT_HTTPHEADER CURLoption 10023)

(bind-val CURLINFO_RESPONSE_CODE CURLINFO 2097154) ;; 0x200000 + 2

;; set-up/tear-down

(bind-val CURL_GLOBAL_ALL i64 3)

(bind-lib libcurl curl_global_init [CURLcode,i64]*)
(bind-lib libcurl curl_global_cleanup [void]*)
(bind-lib libcurl curl_version [i8*]*)

;; 'easy interface' to libcurl
(bind-lib libcurl curl_easy_init [CURL]*)
(bind-lib libcurl curl_easy_setopt [CURLcode,CURL,CURLoption,i8*]*)
(bind-lib libcurl curl_easy_perform [CURLcode,CURL]*)
;; (bind-lib libcurl curl_easy_getinfo [CURLcode,CURL,CURLINFO,i8*]*)
(bind-lib libcurl curl_easy_cleanup [void,CURL]*)
(bind-lib libcurl curl_easy_reset [void,CURL]*)
(bind-lib libcurl curl_easy_duphandle [CURL*,CURL]*)
(bind-lib libcurl curl_easy_recv [CURLcode,CURL,i8*,size_t,size_t*]*)
(bind-lib libcurl curl_easy_send [CURLcode,CURL,i8*,size_t,size_t*]*)
(bind-lib libcurl curl_easy_strerror [i8*,CURLcode]*)

;; slists (for adding extra headers)

(bind-type curl_slist <i8*,curl_slist*>)
(bind-lib libcurl curl_slist_append [curl_slist*,curl_slist*,i8*]*)
(bind-lib libcurl curl_slist_free_all [void,curl_slist*]*)

(bind-type curl_dat <i8*,size_t>)

(bind-func curl_print_version
  (lambda ()
    (printf "cURL version info: %s\n" (curl_version))))

(bind-func curl_setup
  (lambda ()
    (let ((status (curl_global_init CURL_GLOBAL_ALL)))
      (if (= status 0)
          (curl_print_version)
          (printf "cURL initialisation error code: %d\n" status)))))

(curl_setup)

(bind-func curl_write_callback
  (let ((cdat:curl_dat* null)
        (cdat_current_ptr (lambda () (pref-ptr (tref cdat 0) (tref cdat 1))))
        ;; define your own custom callback to change MAX_BUFFER_SIZE
        (MAX_BUFFER_SIZE 1000000))
    (lambda (ptr:i8* size:size_t nmemb:size_t dat:i8*)
      (let ((total_bytes (* size nmemb)))
        (set! cdat (cast dat curl_dat*))
        (if (> (+ (tref cdat 1) total_bytes)
               MAX_BUFFER_SIZE)
            (begin (printf "curl_write_callback buffer overflow!\n") 0)
            (begin
              (memcpy (cdat_current_ptr) ptr total_bytes)
              (tset! cdat 1 (+ (tref cdat 1) total_bytes))
              total_bytes))))))

;; here are some convenience xtlang functions for the different types
;; of requests you might want to make

(bind-func curl_setopts_basic
  (lambda (handle cdat:curl_dat*)
    (curl_easy_setopt handle
                      CURLOPT_WRITEFUNCTION
                      (llvm_get_function_ptr "curl_write_callback_native"))
    (curl_easy_setopt handle CURLOPT_WRITEDATA (cast cdat i8*))
    ;; follow redirects = TRUE
    (let ((followopt:CURLoption* (salloc)))
      (pset! followopt 0 1)
      (curl_easy_setopt handle CURLOPT_FOLLOWLOCATION (cast followopt i8*)))
    ;; user agent string
    (curl_easy_setopt handle CURLOPT_USERAGENT (curl_version))))

(bind-func curl_setopts_authenticate
  (lambda (handle user:i8* password:i8*)
    (let ((userpass:i8* (salloc 256)))
      (sprintf userpass "%s:%s" user password)
      (curl_easy_setopt handle CURLOPT_USERPWD userpass))))

(bind-func curl_setopts_header
  (let ((header_slist:curl_slist* null))
    (lambda (handle header_string:i8*)
      (set! header_slist (curl_slist_append header_slist header_string))
      (curl_easy_setopt handle CURLOPT_HTTPHEADER (cast header_slist i8*))
      header_slist)))

(bind-func curl_perform_request
  (lambda (handle cdat:curl_dat*)
    (let ((status (curl_easy_perform handle)))
        (if (<> status 0)
            (begin (printf "Error accessing URL: %s\n" (curl_easy_strerror status))
                   (tset! cdat 0 null)
                   (tset! cdat 1 0)
                   cdat)
            (begin
              (curl_easy_cleanup handle)
              ;; null-terminate the dat buffer
              (let ((ptr (tref cdat 0)))
                (pset! ptr (tref cdat 1) 0))
              cdat)))))

(bind-func curl_request
  (let ((handle:CURL null)
        (cdat:curl_dat* (zalloc)))
    (lambda (url:i8* dat:i8*)
      ;; init data structures
      (set! handle (curl_easy_init))
      (tset! cdat 0 dat)
      (tset! cdat 1 0)
      (curl_easy_setopt handle CURLOPT_URL url)
      (curl_setopts_basic handle cdat)
      (curl_perform_request handle cdat))))

(bind-func curl_request_with_auth
  (let ((handle:CURL null)
        (cdat:curl_dat* (zalloc)))
    (lambda (url:i8* dat:i8* user:i8* password:i8*)
      ;; init data structures
      (set! handle (curl_easy_init))
      (tset! cdat 0 dat)
      (tset! cdat 1 0)
      (curl_easy_setopt handle CURLOPT_URL url)
      (curl_setopts_basic handle cdat)
      (curl_setopts_authenticate handle user password)
      (curl_perform_request handle cdat))))

(bind-func curl_request_with_header
  (let ((handle:CURL null)
        (cdat:curl_dat* (zalloc)))
    (lambda (url:i8* dat:i8* header:i8*)
      ;; init data structures
      (set! handle (curl_easy_init))
      (tset! cdat 0 dat)
      (tset! cdat 1 0)
      (curl_easy_setopt handle CURLOPT_URL url)
      (curl_setopts_basic handle cdat)
      (let ((header_slist (curl_setopts_header handle header)))
        (curl_perform_request handle cdat)
        (curl_slist_free_all header_slist))
      cdat)))

(bind-func chunked_printf
  (let ((chunk_size 1000))
    (lambda (str:i8*)
      (if (< chunk_size (strlen str))
          (let ((tmpchar (pref str chunk_size)))
            (pset! str chunk_size 0)
            (printf "%s" str)
            (pset! str chunk_size tmpchar)
            (chunked_printf (pref-ptr str chunk_size)))
          (printf "%s\n" str)))))

(bind-func curl_dump_url 1001000
  (let ((dat:i8* (zalloc (+ 1000000 1))))
    (lambda (url)
      (let ((cdat (curl_request url dat)))
        (if (null? (tref cdat 0))
            (printf "There was a problem retrieving the URL.\n")
            (begin
              (printf "--- BEGIN URL DATA ---\n\n")
              (chunked_printf (pref-ptr (tref cdat 0) 0))
              (printf "\n--- END URL DATA ---\n\n")))))))
