;;; instruments_ext.xtm -- instruments (external)

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; This is for instruments which rely on external (that is, C)
;; libraries.
;;
;; The main external instrument is the sampler, which depends on
;; libsndfile to read the samples from the disk into its sample
;; buffers. But over time other instruments which depend on external
;; libraries will be added in here too.

;;; Code:

;; lib-loading config
(sys:load "libs/aot-cache/instruments_ext.xtm" 'quiet)
(sys:load-preload-check 'instruments_ext)
(define *xtmlib-instruments_ext-loaded* #t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; SAMPLER
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(impc:aot:suppress-aot-do
 (sys:load "libs/core/instruments.xtm")
 (sys:load "libs/external/sndfile.xtm"))
(impc:aot:insert-forms (sys:load "libs/core/instruments.xtm" 'quiet))
(impc:aot:insert-forms (sys:load "libs/external/sndfile.xtm" 'quiet))

(impc:aot:insert-header "xtminstruments_ext")

;; helper function for adding sample data to sampler
;; this assumes stereo files at the moment!!
;; passing 0 for length means read to end of file.
;;
;; for example:
;; ;; this reads the whole file into index 60
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 0 0)
;; ;; this reads 5000 frames starting 1000 frames into the file
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 1000 5000)
(bind-func set_sample_data_
  (lambda (inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* filename index:i64 offset lgth bank:i32 print_p:i64)
    (let ((info:SF_INFO* (salloc))
          (audiofile (sf_open filename SFM_READ info))
          (channels:i64 (convert (tref info 2)))
          (num (if (= 0 lgth)
                   (- (tref info 0) offset)
                   lgth)))
      (if (<> null audiofile)
          (let ((adat:SAMPLE* (halloc (* num channels)))
                (samples:|20,|128,SAMPLE*||* (inst.samples))
                (samples_channels:|20,|128,i64||* (inst.samples_channels))
                (samples_length:|20,|128,i64||* (inst.samples_length))
                (samples_read (sf_read_file_into_buffer filename adat (* offset channels) num (i64toi1 print_p)))
                (olddat (if (<> 0 (aref (aref-ptr samples_length bank) index))
                            (bitcast (aref (aref-ptr samples bank) index) i8*)
                            null)))
            ;;(printf "%lld samples read into: %lld\n" samples_read index)
            (aset! (aref-ptr samples_length bank) index (/ samples_read channels)) ;num)
            (aset! (aref-ptr samples_channels bank) index (convert channels))
            (aset! (aref-ptr samples bank) index adat)
            (sf_close audiofile)
            (if (not (null? olddat)) (free olddat))            
            1)
          (begin
            (sf_close audiofile)
            (printf "%s\n" (sf_strerror audiofile))
            0)))))

(bind-func clear_sample_data_
  (lambda (inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* index:i64 bank:i32)
    (let ((samples:|20,|128,SAMPLE*||* (inst.samples))
          (samples_channels:|20,|128,i64||* (inst.samples_channels))
          (samples_length:|20,|128,i64||* (inst.samples_length))          
          (olddat (if (<> 0 (aref (aref-ptr samples_length bank) index))
                      (bitcast (aref (aref-ptr samples bank) index) i8*)
                      null)))
      (aset! (aref-ptr samples_length bank) index 0)
      (aset! (aref-ptr samples_channels bank) index 0)
      (aset! (aref-ptr samples bank) index null)
      (if (null? olddat) 0
          (begin (free olddat)
                 1)))))


;; helper functions for setting an individual samples offset
;; i.e. set sample index 60 to start at 40000 samples into the audio buffer
(bind-func set_sample_offset_
  (lambda (inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* index:i64 bank:i64 offset:i64)
    (let ((offsets:|20,|128,i64||* (inst.samples_offsets)))
      (aset! (aref-ptr offsets bank) index offset)
      1)))


;; linear sampler
;;
;; faster but noisy
(bind-func sampler_note_linear_c
  (lambda (samples:|128,SAMPLE*|* samples_length:|128,i64|* samples_offsets:|128,i64|* index pan:SAMPLE offset:i64 rev:i1)
    (let ((idx_freq:SAMPLE (midi2frq (convert index)))
          (phase:SAMPLE (convert (+ offset (aref samples_offsets index))))) ;; phase unit is audio frames
      (if (and rev (< phase 0.01))
          (set! phase (convert (- (aref samples_length index) 10))))      
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (let ((rate (/ freq idx_freq))
              (pos:SAMPLE (if (= chan 0) ;; only increment once per frame
                              (if rev
                                  (set! phase (- phase rate))
                                  (set! phase (+ phase rate)))
                              phase))
              (posi:i64 (convert (floor pos))) 
              (posx (+ (* posi 2) chan))
              (lgth:i64 (convert (- (aref samples_length index) 10)))
              (dat (aref samples index)))
          (* amp (if (or (> posi lgth) (< posi 0)) 0.0 (pref dat posx))))))))


;; hermite sampler  (multi-channels version)
;;
;; slower but less noisy (default)
(bind-func sampler_note_hermite_c
  (lambda (samples:|128,SAMPLE*|* samples_length:|128,i64|* samples_offsets:|128,i64|* samples_channels:|128,i64|* index pan:SAMPLE offset:SAMPLE rev:i1)
    (let ((idx_freq (midi2frq (convert index)))
          (channels:i64 (convert (aref samples_channels index)))
          (phase (+ offset (convert (aref samples_offsets index))))) ;; phase unit is audio frames
      (if (and rev (< phase 0.01))
          (set! phase (convert (- (aref samples_length index) 10))))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (let ((rate (/ freq idx_freq))              
              (pos:SAMPLE (if (= chan 0) ;; only increment once per frame
                              (if rev
                                  (set! phase (- phase rate))
                                  (set! phase (+ phase rate)))
                              phase))
              (posi:i64 (convert (floor pos)))
              (posx (+ (* posi channels) (if (< chan channels) chan 0)))
              (lgth:i64 (- (aref samples_length index) 10))
              (dat (aref samples index)))
          (if (< (fabs (- rate 1.0)) 0.01)
              (if (or (> posi lgth) (< posi 0))  0.0 (* amp (panner chan pan) (pref dat posx)))
              (let ((y1 (if (or (> posi lgth) (< posi 1)) 0.0
                            (if rev
                                (pref dat (+ posx channels))
                                (pref dat (- posx channels)))))
                    (x0 (if (or (> posi lgth) (< posi 0)) 0.0 (pref dat posx)))
                    (x1 (if (or (> (+ posi 1) lgth) (< (- posi 1) 0)) 0.0
                            (if rev
                                (pref dat (- posx channels))
                                (pref dat (+ posx channels)))))
                    (x2 (if (or (> (+ posi 2) lgth) (< (- posi 2) 0)) 0.0
                            (if rev
                                (pref dat (- posx (* 2 channels)))
                                (pref dat (+ posx (* 2 channels)))))))
                (* (panner chan pan)
                   amp (hermite_interp (modulo pos 1.0) y1 x0 x1 x2)))))))))


(bind-func set_sampler_audiobuffer
  (lambda (inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* buf:AudioBuffer* index:i64 bank:i32)
    (let ((channels:i64 (AudioBuffer_channels buf))
          (num (AudioBuffer_frames buf))
          (adat:SAMPLE* (AudioBuffer_ptr buf 0 0))
          (offsets:|20,|128,i64||* (inst.samples_offsets))
          (samples:|20,|128,SAMPLE*||* (inst.samples))
          (samples_channels:|20,|128,i64||* (inst.samples_channels))
          (samples_length:|20,|128,i64||* (inst.samples_length)))
            ;;(printf "%lld samples read into: %lld\n" samples_read index)
      (aset! (aref-ptr samples_channels bank) index (convert channels))
      (aset! (aref-ptr samples bank) index adat)
      (aset! (aref-ptr offsets bank) index (AudioBuffer_loop_start buf))
      (aset! (aref-ptr samples_length bank) index num)          
      1)))


(bind-func sampler_fx 400000
  (let ((reverbl (reverb_c 80.0))
        (reverbr (reverb_c 79.0))
        (pan .5)
        (pan_ pan)
        (wet .1)
        (fb .5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (if (< pan pan_)
          (set! pan_ (- pan_ .001))
          (set! pan_ (+ pan_ .001)))
      (if (= chan 0)
          (reverbl (* 1.5 (* pan_ in)) wet fb)
          (reverbr (* 1.5 (* (- 1.0 pan_) in)) wet fb)))))

(bind-func sampler1_fx 400000
  (let ((reverbl (reverb_c 80.0))
        (reverbr (reverb_c 79.0))
        (pan .5)
        (pan_ pan)
        (wet .1)
        (fb .5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (if (< pan pan_)
          (set! pan_ (- pan_ .001))
          (set! pan_ (+ pan_ .001)))
      (if (= chan 0)
          (reverbl (* 1.5 (* pan_ in)) wet fb)
          (reverbr (* 1.5 (* (- 1.0 pan_) in)) wet fb)))))

(bind-func sampler2_fx 400000
  (let ((reverbl (reverb_c 80.0))
        (reverbr (reverb_c 79.0))
        (pan .5)
        (pan_ pan)
        (wet .1)
        (fb .5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (if (< pan pan_)
          (set! pan_ (- pan_ .001))
          (set! pan_ (+ pan_ .001)))
      (if (= chan 0)
          (reverbl (* 1.5 (* pan_ in)) wet fb)
          (reverbr (* 1.5 (* (- 1.0 pan_) in)) wet fb)))))

(bind-func sampler3_fx 400000
  (let ((reverbl (reverb_c 80.0))
        (reverbr (reverb_c 79.0))
        (pan .5)
        (pan_ pan)
        (wet .1)
        (fb .5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (if (< pan pan_)
          (set! pan_ (- pan_ .001))
          (set! pan_ (+ pan_ .001)))
      (if (= chan 0)
          (reverbl (* 1.5 (* pan_ in)) wet fb)
          (reverbr (* 1.5 (* (- 1.0 pan_) in)) wet fb)))))


(sys:load "libs/external/instruments_ext-scm.xtm")
;; make sure we load them with AOT-compiled code as well
(impc:aot:insert-forms
 (sys:load "libs/external/instruments_ext-scm.xtm"))

;; (println 'Establish 'audio 'on 'utility 'process)
;; (ipc:audio-setup "utility")

(impc:aot:insert-footer "xtminstruments_ext")
