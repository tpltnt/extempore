;;; assimp.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libstb_image, libassimp

;;; Commentary:

;;; Code:

;; lib-loading config
(sys:load "libs/aot-cache/assimp.xtm" 'quiet)
(sys:load-preload-check 'assimp)
(define *xtmlib-assimp-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/stb_image.xtm")
 (sys:load "libs/external/graphics-pipeline.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/stb_image.xtm" 'quiet)
 (sys:load "libs/external/graphics-pipeline.xtm" 'quiet))

(impc:aot:insert-header "xtmassimp")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libassimp
  (cond ((string=? (sys:platform) "OSX")
         "libassimp.dylib")
        ((string=? (sys:platform) "Linux")
         "libassimp.so")
        ((string=? (sys:platform) "Windows")
         (list "assimp-vc130-mt.dll" "assimp.dll"))))

(bind-func ai_load_ogl_texture
  (lambda (filename tex_id:i32)
    ;; if tex_id is 0, generate a new texture
    (if (= tex_id 0)
        (let ((texid_ptr:i32* (salloc)))
          (glGenTextures 1 texid_ptr)
          (set! tex_id (pref texid_ptr 0))))
    (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 0)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex_id)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "error in ai_load_ogl_texture")
            tex_id)))))

(bind-func ai_load_ogl_texture_from_buffer
  (lambda (buffer buflen tex_id:i32)
    ;; if tex_id is 0, generate a new texture
    (if (= tex_id 0)
        (let ((texid_ptr:i32* (salloc)))
          (glGenTextures 1 texid_ptr)
          (set! tex_id (pref texid_ptr 0))))
    ;; (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load_from_memory buffer buflen width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 0)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex_id)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "error in ai_load_ogl_texture")
            tex_id)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ASSIMP LIBRARY
;;
;; You will need to compile the Open Asset Import Library (ASSIMP)
;; You can get source from here http://assimp.sourceforge.net/
;; Make sure libassimp.so (or similar dylib) is accessible!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val aiProcess_CalcTangentSpace enum #x1)
(bind-val aiProcess_JoinIdenticalVertices enum #x2)
(bind-val aiProcess_MakeLeftHanded enum #x4)
(bind-val aiProcess_Triangulate enum #x8)
(bind-val aiProcess_RemoveComponent enum #x10)
(bind-val aiProcess_GenNormals enum #x20)
(bind-val aiProcess_GenSmoothNormals enum #x40)
(bind-val aiProcess_SplitLargeMeshes enum #x80)
(bind-val aiProcess_PreTransformVertices enum #x100)
(bind-val aiProcess_LimitBoneWeights enum #x200)
(bind-val aiProcess_ValidateDataStructure enum #x400)
(bind-val aiProcess_ImproveCacheLocality enum #x800)
(bind-val aiProcess_RemoveRedundantMaterials enum #x1000)
(bind-val aiProcess_FixInfacingNormals enum #x2000)
(bind-val aiProcess_SortByPType enum #x8000)
(bind-val aiProcess_FindDegenerates enum #x10000)
(bind-val aiProcess_FindInvalidData enum #x20000)
(bind-val aiProcess_GenUVCoords enum #x40000)
(bind-val aiProcess_TransformUVCoords enum #x80000)
(bind-val aiProcess_FindInstances enum #x100000)
(bind-val aiProcess_OptimizeMeshes enum  #x200000)
(bind-val aiProcess_OptimizeGraph enum  #x400000)
(bind-val aiProcess_FlipUVs enum #x800000)
(bind-val aiProcess_FlipWindingOrder enum  #x1000000)
(bind-val aiProcess_SplitByBoneCount enum  #x2000000)
(bind-val aiProcess_Debone enum  #x4000000)

(bind-type aiString <size_t,|1024,i8|> (printer? . #f))
                                        ;(llvm:compile "%aiString = type {i64, |1024xi8|}
(bind-type aiMatrix4x4 <float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float>)
(bind-type aiMatrix3x3 <float,float,float,float,float,float,float,float,float>)
(bind-type aiVector4D <float,float,float,float>)
(bind-type aiVector3D <float,float,float>)
(bind-type aiVector2D <float,float>)
;; r g b a
(bind-type aiColor4D <float,float,float,float>)
(bind-type aiColor3D <float,float,float>)
(bind-type aiQuaternion <float,float,float,float>)
(bind-type aiTexel <i8,i8,i8,i8>) ;; b,g,r,a
;; mTime,mValue
(bind-type aiVectorKey <double,aiVector3D>) ;; good
;; mTime,mValue
(bind-type aiQuatKey <double,aiQuaternion>) ;; good
;; mTime,mValue
(bind-type aiMeshKey <double,i32>) ;; good
;; mName(0),mTransformation(1),mParent(2),mNumChildren(3),mChildren(4),mNumMeshes(5),mMeshes(6),mMetadata(7)
(bind-type aiNode <aiString,aiMatrix4x4,aiNode*,i32,aiNode**,i32,i32*,i8*>) ;; good 1144
;; mNumIndices,mIndicies
(bind-type aiFace <i32,i32*>) ;; good
;; mVertexId,mWeightm
(bind-type aiVertexWeight <i32,float>) ;; good
;; mName,mNumWeights,mWeights,mOffsetMatrix
(bind-type aiBone <aiString,i32,aiVertexWeight*,aiMatrix4x4>) ;; good
;; mVertices,mNormals,mTangents,mBitangents,mColors,mNumVertices
(bind-type aiAnimMesh <aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,i32>) ;; good
;; mPrimitiveTypes(0),mNumVertices(1),mNumFaces(2),mVertices(3),mNormals(4),mTangents(5),mBitangents(6),mColors(7),mTextureCoords(8),mNumUVComponents(9),mFaces(10),mNumBones(11),mBones(12),mMaterialIndex(13),mName(14),mNumAnimMeshes(15)

(bind-type aiMesh <i32,i32,i32,aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,|8,i32|,aiFace*,i32,aiBone**,i32,aiString,i32,aiAnimMesh**,i64>) ;; i64 on end is padding

;; mTranslation,mScaling,mRotation
(bind-type aiUVTransform <aiVector2D,aiVector2D,float>) ;; good
;; mKey(0),mSemantic(1),mIndex(2),mDataLength(3),mType(4),mData(5)
(bind-type aiMaterialProperty <aiString,i32,i32,i32,i32,i8*>) ;; good
;; mProperties,mNumProperties,mNumAllocated
(bind-type aiMaterial <aiMaterialProperty**,i32,i32>) ;; good
;; mNodeName,mNumPositionKeys,mPositionKeys,mNumRotationKeys,mRotationKeys,mNumScalingKeys,mScalingKeys,mPreState,mPostState
(bind-type aiNodeAnim <aiString,i32,aiVectorKey*,i32,aiQuatKey*,i32,aiVectorKey*,i32,i32>) ;; good
;; mName,mNumKeys,mKeys
(bind-type aiMeshAnim <aiString,i32,aiMeshKey*>) ;; good
;; mName,mDuration,mTicksPerSecond,mNumChannels,mChannels,mNumMeshChannels,mMeshChannels
(bind-type aiAnimation <aiString,double,double,i32,aiNodeAnim**,i32,aiMeshAnim**>) ;; good
;; mWidth,mHeight,achFormatHint,pcData
(bind-type aiTexture <i32,i32,|4,i8|,aiTexel*>) ;; good
;; mName,mType,mPosition,mDirection,mAttenuationConstant,mAttenuationLinear,mAttenuationQuadratic,mColorDiffuse,mColorSpecular,mColorAmbient,mAngleInnerCone,mAngleOuterCone
(bind-type aiLight <aiString,i32,aiVector3D,aiVector3D,float,float,float,aiColor3D,aiColor3D,aiColor3D,float,float>) ;; good
;; mName,mPosition,mUp,mLookAt,mHorizontalFOV,mClipPlaneNear,mClipPlaneFar,mAspect
(bind-type aiCamera <aiString,aiVector3D,aiVector3D,aiVector3D,float,float,float,float>) ;; good
;; mFlags(0),mRootNode(1),mNumMeshes(2),mMeshes(3),mNumMaterials(4),mMaterials(5),mNumAnimations(6),mAnimations(7),mNumTextures(8),mTextures(9),mNumLights(10),mLights(11),mNumCameras(12),mCameras(13)
(bind-type aiScene <i32,aiNode*,i32,aiMesh**,i32,aiMaterial**,i32,aiAnimation**,i32,aiTexture**,i32,aiLight**,i32,aiCamera**,i8*>) ;; good
(bind-type aiExportFormatDesc <i8*,i8*,i8*>)
;;
;; (bind-type aicontainer <aiScene*,aiVector3D*,aiVector3D*,aiVector3D*>)

(bind-lib libassimp aiImportFile [aiScene*,i8*,i32]*)
(bind-lib libassimp aiExportScene [i32,aiScene*,i8*,i8*,i32]*)
(bind-lib libassimp aiGetExportFormatCount [size_t]*)
(bind-lib libassimp aiGetExportFormatDescription [aiExportFormatDesc*,size_t]*)
(bind-lib libassimp aiReleaseImport [void,aiScene*]*)
(bind-lib libassimp aiIdentityMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiMultiplyMatrix4 [void,aiMatrix4x4*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransformVecByMatrix4 [void,aiVector3D*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix3 [void,aiMatrix3x3*]*)
(bind-lib libassimp aiGetMaterialColor [i32,aiMaterial*,i8*,i32,i32,aiColor4D*]*)
(bind-lib libassimp aiGetMaterialString [i32,aiMaterial*,i8*,i32,i32,aiString*]*)
(bind-lib libassimp aiGetMaterialFloatArray [i32,aiMaterial*,i8*,i32,i32,float*,i32*]*)
(bind-lib libassimp aiGetMaterialIntegerArray [i32,aiMaterial*,i8*,i32,i32,i32*,i32*]*)
;; aiReturn (aiMaterial* mat, aiTextureType type, uint index, aiString* path, aiTextureMapping* mapping, uint* uvindex, float* blend, aiTextureOp* op, aiTextureMapMode* mapmode, uint* flags) 
(bind-lib libassimp aiGetMaterialTexture [i32,aiMaterial*,i32,i32,aiString*,i32*,i32*,float*,i32*,i32*,i32*]*)
;; uint (aiMaterial* mat,i32 type)
(bind-lib libassimp aiGetMaterialTextureCount [i32,aiMaterial*,i32]*)

(bind-func aiGetMaterialFloat:[i32,aiMaterial*,i8*,i32,i32,float*]*
  (lambda (mat pkey type index pout)
    (aiGetMaterialFloatArray mat pkey type index pout null)))

(bind-func ai_matrix4_to_float
  (lambda (mat1:aiMatrix4x4* mat2:float*)
    (doloop (i 16)
      (pset! mat2 i (aref (convert mat1 |16,float|*) i)))))

(bind-func print
  (lambda (str:aiString*)
    (let ((size (tref str 0))
          (dat (convert (tref-ptr str 1) i8*)))
      (printf "%.*s\n" size dat)
      void)))

(bind-func ai_color4_to_float4
  (lambda (colour:aiColor4D* dat:float*)
    (pset! dat 0 (tref colour 0))
    (pset! dat 1 (tref colour 1))
    (pset! dat 2 (tref colour 2))
    (pset! dat 3 (tref colour 3))))

;; mode is a bit of a dodge
;; it basically returns whatever the
;; last vertex positions mode was
;; GL_POINTS GL_LINES GL_TRIANGLE GL_QUADS or GL_POLYGON
(bind-func ai_build_mesh_vbo
  (lambda (mesh:aiMesh* modes:i32*)
    ;; (printf "... mesh vbo\n")    
    (let ((i:i32 0) (j:i32 0)
          (vbodata:float* null)
          (vbostride:i32 14) ;; 4d+3d+3d+4d in floats
          (positions:i32 0)
          (position_cnt:i32 -1)
          (vertices:aiVector3D* (tref mesh 3))
          (normals:aiVector3D* (tref mesh 4))
          (num_vertices (tref mesh 1))
          (num_faces:i32 (tref mesh 2))
          (faces (tref mesh 10))
          (face:aiFace* null)
          (num_indicies:i32 0)
          (face_mode:i32 0)
          (index:i32 0)
          (indicies:i32* null)
          (colors:aiColor4D* (aref (tref-ptr mesh 7) 0)) ;; only use first 'set' of colors
          (texturecoords:aiVector3D* (aref (tref-ptr mesh 8) 0))) ;; only use first 'set' of texcoords
      ;; precalc the total number of positions required
      ;; this is the total number of faces * the total number of
      ;; indexes per face
      (dotimes (i num_faces)        
        (set! face (pref-ptr faces i))
        (set! positions (+ positions (tref face 0)))
        (set! indicies (tref face 1))
        (dotimes (j (tref face 0))
          (set! index (pref indicies j))
          ;; (printf "index: %d:%d\n" (+ (- positions 3) j) index)
          (if (or (< index 0) (> index num_vertices))
              (printf "Bad Index Value: %d:%d (%d:%d) %d:%d\n" index num_vertices i j (pref indicies (+ j 1)) (pref indicies (+ j 2))))))
      (printf "...mesh:> faces:%d vertices:%d\n" num_faces positions)
      ;; 4d position + 3d normal + 3d coord + 4d colors
      (let ((vbod:float* (halloc (* positions vbostride))))
        (set! vbodata vbod)) ;; (cast (malloc (i32toi64 (* positions vbostride 4))) float*))
      (dotimes (i num_faces)
        (set! face (pref-ptr faces i))
        (set! num_indicies (tref face 0))
        (if (<> num_indicies 3)
            (printf "ERROR: all faces should be triangulated!!!!\n"))
        (set! indicies (tref face 1))
        (dotimes (j num_indicies)
          (set! position_cnt (+ position_cnt 1))
          ;; (set! index position_cnt) ;;(pref indicies j))
          (set! index (pref indicies j))
          ;; (printf "index %d:%d:%d:%d:%p:%p:%p\n" j num_indicies index position_cnt face indicies faces)
          (if (or (< index 0) (> index num_vertices))
              (printf "...Bad Index Value: %d:%d  (%d:%d)  %d:%d\n" index num_vertices i j
                      (pref indicies (+ j 1)) (pref indicies (+ j 2))))
          (pfill! (pref-ptr vbodata (* position_cnt vbostride))
                  (tref (pref-ptr vertices index) 0) ;; x
                  (tref (pref-ptr vertices index) 1) ;; y
                  (tref (pref-ptr vertices index) 2) ;; z
                  1.0 ;; we are a position (i.e. w==1)
                  )
          (if (null? normals)
              (pfill! (pref-ptr vbodata (+ 4 (* position_cnt vbostride))) ;; offset 4
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 4 (* position_cnt vbostride))) ;; offset 4
                      (tref (pref-ptr normals index) 0) ;; x
                      (tref (pref-ptr normals index) 1) ;; y
                      (tref (pref-ptr normals index) 2) ;; z
                      ))
          (if (null? texturecoords)
              (pfill! (pref-ptr vbodata (+ 7 (* position_cnt vbostride))) ;; offset 4+3
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 7 (* position_cnt vbostride)))
                      (tref (pref-ptr texturecoords index) 0) ;; x
                      (tref (pref-ptr texturecoords index) 1) ;; y
                      0.0 ;;(tref (pref-ptr texturecoords index) 2) ;; z
                      ))
          (if (null? colors) ;; if colors is null make vertex color red
              (pfill! (pref-ptr vbodata (+ 10 (* position_cnt vbostride))) ;; offset 4+3+3
                      1.0 0.0 0.0 1.0)
              (pfill! (pref-ptr vbodata (+ 10 (* position_cnt vbostride))) ;; offset 4+3+3
                      (tref (pref-ptr colors index) 0) ;; r
                      (tref (pref-ptr colors index) 1) ;; g
                      (tref (pref-ptr colors index) 2) ;; b
                      (tref (pref-ptr colors index) 3) ;; a
                      ))))
      (if (<> (+ 1 position_cnt) positions)
          (printf "Error: positions:%d <> position_cnt:%d" positions (+ position_cnt 1)))
      (pset! modes 0 GL_TRIANGLES) ;;  face_mode)
      ;; return vbo
      (let ((vbo (VBO_create_float_usage vbodata (convert (* positions vbostride)) GL_STATIC_DRAW)))
        (glBindBuffer GL_ARRAY_BUFFER 0)
        vbo))))

(bind-func ai_build_mesh
  (lambda (scene:aiScene* mesh:aiMesh* aimesh:xtm_mesh* dir:i8*)
    ;; (printf "\tBuild Mesh\n")
    (let ((facemode:i32* (salloc)) 
          (vbo:VBO* null)
          (color:aiColor4D* (salloc))
          (val:float* (salloc))
          (diffuse:float* (halloc 4))
          (ambient:float* (halloc 4))
          (specular:float* (halloc 4))
          (emissive:float* (halloc 4))
          (material_index (tref mesh 13))
          (material (pref (tref scene 5) material_index))
          (texid 0)
          (texfile:aiString* (salloc))          
          (name:aiString* (tref-ptr mesh 14)))
      (set! vbo (ai_build_mesh_vbo mesh facemode))
      (tset! aimesh 0 vbo)
      (if (= (aiGetMaterialTexture material 1 0 texfile null null null null null null) 0)
          (let ((s1 (cast (tref-ptr texfile 1) i8*))
                (lgth (+ (strlen dir) (tref texfile 0) 1))
                (s2 (salloc lgth)))
            (if (= (pref s1 0) 42)
                (let ((texidx:i32 (atoi (pref-ptr s1 1)))
                      (texture:aiTexture* (pref (tref scene 9) texidx))
                      (achformat (tref texture 2))
                      (texwidth (tref texture 0))
                      (texheight (tref texture 1))
                      (texdata (cast (tref texture 3) i8*))
                      (datasize (if (= texheight 0) texwidth (* 4 texwidth texheight))))
                  ;;(printf "tidx:%d of num:%d w:%d h:%d size:%d\n" texidx (tref scene 8) texwidth texheight datasize)
                  (set! texid (ai_load_ogl_texture_from_buffer texdata datasize 0)))
                (begin 
                  (memset s2 0 lgth)
                  (memcpy s2 dir (strlen dir))
                  (memcpy (pref-ptr s2 (strlen dir)) s1 (tref texfile 0))
                  (set! texid (ai_load_ogl_texture s2 0))))))
      (tset! aimesh 1 texid)
      (if (= (aiGetMaterialColor material "$clr.diffuse" 0 0 color) 0)
          (ai_color4_to_float4 color diffuse))
      (tset! aimesh 2 diffuse)
      (if (= (aiGetMaterialColor material "$clr.ambient" 0 0 color) 0)          
          (ai_color4_to_float4 color ambient))
      (tset! aimesh 3 ambient)      
      (if (= (aiGetMaterialColor material "$clr.specular" 0 0 color) 0)
          (ai_color4_to_float4 color specular))
      (tset! aimesh 4 specular)            
      (if (= (aiGetMaterialColor material "$clr.emissive" 0 0 color) 0)
          (ai_color4_to_float4 color emissive))
      (tset! aimesh 5 emissive)
      (if (= (aiGetMaterialFloat material "$mat.shininess" 0 0 val) 0)
          (begin (tset! aimesh 6 (pref val 0)) 1)
          (begin (tset! aimesh 6 0.0) 1))
      (if (= (aiGetMaterialFloat material "$mat.opacity" 0 0 val) 0)
          (begin (tset! aimesh 7 (pref val 0)) 1)
          (begin (tset! aimesh 7 0.0) 1))
      (tset! aimesh 8 (pref facemode 0))
      void)))

;; returns the scenes top level node as xtm_node*
(bind-func ai_build_node
  (lambda (scene:aiScene* node:aiNode* _node:xtm_node* parent:xtm_node* dir:i8*)
    (let ((i:i32 0)
          (ain:aiString* (tref-ptr node 0))
          (namelgth (tref ain 0))
          (name:i8* (halloc (+ 1 namelgth)))
          (numchildren:i32 (tref node 3))
          (children:aiNode** (tref node 4))          
          (_children:xtm_node* (halloc (+ 1 numchildren)))
          (nummeshes:i32 (tref node 5))
          (meshes:aiMesh** (tref scene 3))          
          (_meshes:xtm_mesh* (halloc (+ 1 nummeshes)))
          (transmat:float* (halloc 16)))
      (memset name 0 (+ namelgth 1))
      (memcpy name (cast (tref-ptr ain 1) i8*) namelgth)
      (printf "Node:%s\n" name)
      ;;(printf "Build node:%s:%p children(%d)  meshes(%d)\n" name _node numchildren nummeshes)
      (tset! _node 0 name)
      (ai_matrix4_to_float (tref-ptr node 1) transmat)
      (tset! _node 1 transmat)
      (tset! _node 2 parent)
      (tset! _node 3 numchildren)
      (dotimes (i numchildren)
        (ai_build_node scene (pref children i) (pref-ptr _children i) _node dir))
      (tset! _node 4 _children)
      (tset! _node 5 nummeshes)
      (dotimes (i nummeshes)
        (ai_build_mesh scene (pref meshes (pref (tref node 6) i)) (pref-ptr _meshes i) dir))
      (tset! _node 6 _meshes)
      void)))

;; returns the scenes top level node as xtm_node*
(bind-func ai_build_scene  
  (lambda (scene:aiScene* dir:i8*)
    (printf "embedded textures: %d\n" (tref scene 8))
    (let ((root:xtm_node* (halloc)))
      ;; (printf "\nNew Scene ... %p\n" scene)
      (ai_build_node scene (tref scene 1) root null dir)
      root)))

;; where post is any post processing required
;; if value is 0 then use default
;; of (+ aiProcess_FindDegenerates aiProcess_Triangulate)
;; if value > 0 then use post exactly as defined
;; which means the user must add AT LEAST aiProcess_Triangulate
;;
(bind-func assimp_load_model
  (lambda (dir file post)
    (let ((lgth (+ (strlen dir) (strlen file) 1))
          (scene:aiScene* null)
          (path:i8* (salloc lgth)))
      (memset path 0 lgth)
      (memcpy path dir (strlen dir))
      (memcpy (pref-ptr path (strlen dir)) file (strlen file))
      (if (> post 0)
          (set! scene (aiImportFile path post))
          (set! scene (aiImportFile path (+ aiProcess_FindDegenerates aiProcess_PreTransformVertices aiProcess_OptimizeMeshes aiProcess_OptimizeGraph aiProcess_Triangulate))))
      ;;(set! scene (aiImportFile path 498379))
      (let ((root:xtm_node*
             (if (null? scene)
                 (begin (printf "Bad Asset! %s\n" path) (cast null xtm_node*))
                 (ai_build_scene scene dir))))
        (if (not (null? scene))
            (begin ;; (printf "delete scene: %p\n" scene)
              (aiReleaseImport scene)))
        root))))

(bind-func assimp_load_model
  (lambda (dir file)
    (assimp_load_model:[xtm_node*,i8*,i8*,i32]* dir file 0)))


(bind-func ai_print_export_formats
  (lambda ()
    (let ((i 0)
          (desc:aiExportFormatDesc* null)
          (cnt (aiGetExportFormatCount)))
      (printf "**************************\n")      
      (dotimes (i cnt)
        (set! desc (aiGetExportFormatDescription i))
        (printf "------\nid(%s):ext(%s)\n%s\n" (tref desc 0) (tref desc 2) (tref desc 1)))
      (printf "**************************\n")
      void)))

(bind-func ai_convert
  (lambda (fin fout format:i8* aiprocess)
    (printf "Convert 3D File to %s\n" format)
    (let ((scene (aiImportFile fin aiprocess)))
      (printf "Scene successfully imported\n" scene)
      (aiExportScene scene format fout aiprocess)
      (printf "\n Done exporting scene\n")
      void)))

;; define the constants in Scheme as well
(impc:aot:do-or-emit
 (define aiProcess_CalcTangentSpace #x1))
(impc:aot:do-or-emit
 (define aiProcess_JoinIdenticalVertices #x2))
(impc:aot:do-or-emit
 (define aiProcess_MakeLeftHanded #x4))
(impc:aot:do-or-emit
 (define aiProcess_Triangulate #x8))
(impc:aot:do-or-emit
 (define aiProcess_RemoveComponent #x10))
(impc:aot:do-or-emit
 (define aiProcess_GenNormals #x20))
(impc:aot:do-or-emit
 (define aiProcess_GenSmoothNormals #x40))
(impc:aot:do-or-emit
 (define aiProcess_SplitLargeMeshes #x80))
(impc:aot:do-or-emit
 (define aiProcess_PreTransformVertices #x100))
(impc:aot:do-or-emit
 (define aiProcess_LimitBoneWeights #x200))
(impc:aot:do-or-emit
 (define aiProcess_ValidateDataStructure #x400))
(impc:aot:do-or-emit
 (define aiProcess_ImproveCacheLocality #x800))
(impc:aot:do-or-emit
 (define aiProcess_RemoveRedundantMaterials #x1000))
(impc:aot:do-or-emit
 (define aiProcess_FixInfacingNormals #x2000))
(impc:aot:do-or-emit
 (define aiProcess_SortByPType #x8000))
(impc:aot:do-or-emit
 (define aiProcess_FindDegenerates #x10000))
(impc:aot:do-or-emit
 (define aiProcess_FindInvalidData #x20000))
(impc:aot:do-or-emit
 (define aiProcess_GenUVCoords #x40000))
(impc:aot:do-or-emit
 (define aiProcess_TransformUVCoords #x80000))
(impc:aot:do-or-emit
 (define aiProcess_FindInstances #x100000))
(impc:aot:do-or-emit
 (define aiProcess_OptimizeMeshes #x200000))
(impc:aot:do-or-emit
 (define aiProcess_OptimizeGraph #x400000))
(impc:aot:do-or-emit
 (define aiProcess_FlipUVs #x800000))
(impc:aot:do-or-emit
 (define aiProcess_FlipWindingOrder #x1000000))
(impc:aot:do-or-emit
 (define aiProcess_SplitByBoneCount #x2000000))
(impc:aot:do-or-emit
 (define aiProcess_Debone #x4000000))
;; poor man's Scheme polying
(impc:aot:do-or-emit
 (define assimp_load_model
                       (lambda (dir file . args)
                         (if (null? args)
                             (assimp_load_model_b dir file)
                             (assimp_load_model_a dir file (car args))))))

(impc:aot:insert-footer "xtmassimp")
(define *xtmlib-assimp-loaded* #t)
