;;
;; Copyright (c) 2011, Andrew Sorensen
;;
;; All rights reserved.
;;
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; 1. Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;;
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;;
;; Neither the name of the authors nor other contributors may be used to endorse
;; or promote products derived from this software without specific prior written
;; permission.
;;
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;


;; std.xtm is loaded automatically by all processes on startup
;; std.xtm is for xtlang as scheme.xtm is for scheme.

;; lib-loading config

(sys:load "libs/aot-cache/base.xtm" 'quiet)
(sys:load-preload-check 'base)
(define *xtmlib-base-loaded* #f)

(impc:aot:insert-header "xtmbase")

;; (suppress-compiler-messages #f)

;;;;;;;;;;;;;
;; aliases ;;
;;;;;;;;;;;;;

(bind-alias bool i1 "boolean true/false type")

(if (= (sys:pointer-size) 64)
    (bind-alias size_t i64 "useful for working with C libraries")
    (bind-alias size_t i32 "useful for working with C libraries"))

(bind-alias enum i32 "useful for working with C libraries")

;;;;;;;;;;;;;;;
;; constants ;;
;;;;;;;;;;;;;;;

;; maths

(bind-val PIf float 3.1415926535897932384626433832795028841971693993751058209749 "pi of float type")
(bind-val TWOPIf float 6.2831853071795864769252867665590057683943387987502116419498 "2pi of float type")
(bind-val Ef float 2.7182818284590452353602874713526624977572470936999595749669
          "e (base of natural log) of float type")

(bind-val PI double 3.1415926535897932384626433832795028841971693993751058209749
          "pi of double type")
(bind-val TWOPI double 6.2831853071795864769252867665590057683943387987502116419498
          "pi of double type")
(bind-val E double 2.7182818284590452353602874713526624977572470936999595749669
          "e (base of natural log) of double type")

;; audio

;; if you change one of these, make sure you change them all!

(bind-alias SAMPLE float
            "audio I/O sample type in the dsp processing chain")
(bind-alias DSP [SAMPLE,SAMPLE,i64,i64,SAMPLE*]*
            "audio output callback type")
(bind-alias DSPMT [SAMPLE,SAMPLE*,i64,i64,SAMPLE*]*
            "(multithreaded) audio output callback type")
(bind-alias DSPMC [void,float*,float*,i64,i8*]*
            "buffered audio output callback type")
(bind-alias DSPMCMT [void,float**,float*,i64,i8*]*
            "buffered (multithreaded) audio output callback type")
(bind-func audio_64bit "audiostuff" (lambda () 0:i1))

(bind-val SPI SAMPLE 3.1415926535897932384626433832795028841971693993751058209749
          "pi of type SAMPLE")
(bind-val STWOPI SAMPLE 6.2831853071795864769252867665590057683943387987502116419498
          "2pi of type SAMPLE")
(bind-val SE SAMPLE 2.7182818284590452353602874713526624977572470936999595749669
          "e (base of natural log) of type SAMPLE")

(bind-val SAMPLERATE SAMPLE (llvm_samplerate)
  "audio sample rate")
(bind-val SRs SAMPLE SAMPLERATE "audio sample rate")
(bind-val SRf float SAMPLERATE "audio sample rate (float)")
(bind-val SRd double SAMPLERATE "audio sample rate (double)")
(bind-val SR i64 SAMPLERATE) "audio sample rate (i64)"
(bind-val CHANNELS i64 (llvm_channels)) "number of audio output channels"
(bind-val IN_CHANNELS i64 (llvm_in_channels)) "number of audio input channels"
(bind-val FRAMES i64 (llvm_frames)) "audio signal chain block size"

;; IEEE floating point NaNs

(bind-val NaNf float  0.0 "single-precision not-a-number (NaN)")
(bind-val NaN double 0.0 "double-precision not-a-number (NaN)")

(bind-func set_float_nans_
  (lambda ()
    (let ((nan32 #x7FC00000)
          (nan64 #x7FFC000000000000)
          (n32:i32* (alloc))
          (n64:i64* (alloc)))
      (pset! n32 0 nan32)
      (pset! n64 0 nan64)
      (set! NaNf (pref (cast n32 float*) 0))
      (set! NaN (pref (cast n64 double*) 0))
      void)))

;;(impc:aot:do-or-emit (set_float_nans__adhoc_W3ZvaWRd))
(impc:aot:do-or-emit (xtmX (set_float_nans_)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; basic printing must go before
;; any named tuples!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; prints a line break
(bind-func print_return
  (lambda () (putchar 10) void))

;; prints a space
(bind-func print_space
  (lambda () (putchar 32) void))

(bind-func print
  (lambda (x:i1) (printf "%d" x) void))

(bind-func print
  (lambda (x:i8) (printf "%d" (convert x i32)) void))

(bind-func print
  (lambda (x:i32) (printf "%d" x) void))

(bind-func print
  (lambda (x:i64) (printf "%lld" x) void))

(bind-func print
  (lambda (x:float) (printf "%f" (ftod x)) void))

(bind-func print
  (lambda (x:double) (printf "%f" x) void))

(bind-func print:[void,!a]*
  "generic \"catch-all\" print"
  (lambda (x) (printf "_") void))

;;;;;;;;;;;;;;;;;;;
;; xtlang macros ;;
;;;;;;;;;;;;;;;;;;;

(bind-macro
  "increment variable by y"
  (inc x y)
  `(set! ,x (+ ,x ,y)))

(bind-macro
  "decrement variable by y"
  (dec x y)
  `(set! ,x (- ,x ,y)))

(bind-macro
  "minimum of x and y"
  (min x y)
  `(if (< ,x ,y) ,x ,y))

(bind-macro
  "maximum of x and y"
  (max x y)
  `(if (> ,x ,y) ,x ,y))

(bind-macro
  "clamp input value to range"
  (clamp x minval maxval)
  `(if (> ,x ,maxval) ,maxval
       (if (< ,x ,minval) ,minval
           ,x)))

(bind-macro
  "log with arbitrary base"
  (logn x base)
  `(/ (log ,x) (log ,base)))

(bind-macro
  "convert angle in degrees to radians"
  (deg2rad degrees)
  `(/ ,degrees 57.2957795))

(bind-macro
  "convert angle in radians to degrees"
  (rad2deg radians)
  `(* 57.2957795 ,radians))

(bind-macro
  "returns #t for even integers, #f otherwise"
  (evenp x)
  `(if (= (bitwise-and ,x 1) 0) 1:i1 0:i1))

(bind-macro
  "returns #t for odd integers, #f otherwise"
  (oddp x)
  `(if (= (bitwise-and ,x 1) 0) 0:i1 1:i1))

(bind-macro
  "simple tuple binding

(let ((tuple:<i32,double,i32,i64>* (alloc))
      ((var1 0) (var2 0.0)))
  (tbind tuple _ var2 _ var1)

  would match var2 to the double, and var1 to the i64"
  (tbind data . args)
  (cons 'begin
        (map (lambda (x n)
               (if (not (eq? x '_))
                   `(set! ,x (tref ,data ,n))))
             args
             (make-list-with-proc (length args) (lambda (i) (real->integer i))))))


(bind-macro
 "return native function name for closure"
 (get_native_name closure-name . type)
 (let* ((pair (regex:type-split (symbol->string closure-name) ":"))
        (base (if (null? (cdr pair)) "" (impc:ir:get-base-type (cadr pair)))))
   (set! closure-name (symbol->string closure-name))
   (if (not (null? (cdr pair)))
       (string-append (car pair) "_adhoc_" (cname-encode base) "_native")
       (if (null? type)
           (if (and (impc:ti:polyfunc-exists? closure-name)
                    (= (length (impc:ti:get-polyfunc-candidate-types closure-name)) 1))
               (let* ((t (impc:ir:pretty-print-type (car (impc:ti:get-polyfunc-candidate-types closure-name))))
                      (bt (impc:ir:get-base-type t))
                      (fullname (string-append closure-name
                                               "_adhoc_"
                                               (cname-encode bt)
                                               "_native")))
                 fullname)
               (impc:compiler:print-compiler-error "Try forcing a type? Ambiguous call to get_native_fptr" (string->symbol closure-name)))
           (let* ((bt (impc:ir:get-base-type (symbol->string (car type))))
                  (fullname (string-append closure-name
                                           "_adhoc_"
                                           (cname-encode bt)
                                           "_native")))
             fullname)))))

;; the same functionality, but for use in xtlang code
(bind-macro
 "return native function pointer for closure"
 (get_native_fptr closure-name . type)
 (if (null? type)
     `(llvm_get_function_ptr (get_native_name ,closure-name))
     `(llvm_get_function_ptr (get_native_name ,closure-name ,(car type)))))


(bind-macro
  "a \"thread-first\" macro

This macro can help make code more readable by removing nesting.
Threads the first expr passed to the macro into the first position in
the second sexp. Recursively continues to thread the resultant sexp
into any further sexp arguments."
  (-> value . args)
  (if (null? args)
      value
      (let loop ((thread-items args)
                 (transformed value))
        (if (null? thread-items)
            transformed
            (loop
             (cdr thread-items)
             (insert-at-index 1 (car thread-items) transformed))))))

(bind-macro
  "a \"thread-last\" macro

This macro can help make code more readable by removing nesting.
Threads the first expr passed to the macro into the last position in
the second sexp. Recursively continues to thread the resultant sexp
into any further sexp arguments."
  (->> value . args)
  (if (null? args)
      value
      (let loop ((thread-items args)
                 (transformed value))
        (if (null? thread-items)
            transformed
            (loop
             (cdr thread-items)
             (insert-at-index (length (car thread-items)) (car thread-items) transformed))))))

;;;;;;;;;;;;
;; random ;;
;;;;;;;;;;;;

(bind-poly random imp_randf "polymorphic (pseudo)random number generation")
(bind-poly random imp_randd)
(bind-poly random imp_rand1_i32)
(bind-poly random imp_rand2_i32)
(bind-poly random imp_rand1_i64)
(bind-poly random imp_rand2_i64)
(bind-poly random imp_rand1_f)
(bind-poly random imp_rand2_f)
(bind-poly random imp_rand1_d)
(bind-poly random imp_rand2_d)

;;;;;;;;;;;;;;;;;;
;; triginometry ;;
;;;;;;;;;;;;;;;;;;

;; many of these are handled through llvm intrinsics these days

(bind-poly tan tanf)
(bind-poly tan llvm_tan)
(bind-poly cosh coshf)
(bind-poly cosh llvm_cosh)
(bind-poly tanh tanhf)
(bind-poly tanh llvm_tanh)
(bind-poly sinh sinhf)
(bind-poly sinh llvm_sinh)
(bind-poly asin asinf)
(bind-poly asin llvm_asin)
(bind-poly atan atanf)
(bind-poly atan llvm_atan)
(bind-poly atan2 atan2f)
(bind-poly atan2 llvm_atan2)
;; (bind-poly ceil ceilf)
;; (bind-poly ceil llvm_ceil)
;; (bind-poly floor floorf)
;; (bind-poly floor llvm_floor)
;; (bind-poly exp expf)
;; (bind-poly exp llvm_exp)
;; (bind-poly fmod fmodf)
;; (bind-poly fmod llvm_fmod)
;; (bind-poly pow powf)
;; (bind-poly pow llvm_pow)
;; (bind-poly log logf)
;; (bind-poly log llvm_log)
;; (bind-poly log2 log2f)
;; (bind-poly log2 llvm_log2)
;; (bind-poly log10 log10f)
;; (bind-poly log10 llvm_log10)
;; (bind-poly sqrt sqrtf)
;; (bind-poly sqrt llvm_sqrt)
;; (bind-poly fabs fabsf)
;; (bind-poly fabs llvm_fabs)

;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some zone helpers
;;
;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func print:[void,mzone*]*
  (lambda (z)
    (llvm_zone_print z)
    void))

;; NOTE!  push_zone and pop_zone are compiler directives!
;; i.e. look in llvmir.xtm

(bind-func Zone
  (lambda (size)
    (llvm_zone_create size)))

(bind-func reset_zone
  (lambda (z)
    (llvm_zone_reset z)))

(bind-func destroy_zone
  (lambda (z)
    (llvm_zone_destroy z)))

(bind-func peek_zone
  (lambda ()
    (llvm_peek_zone_stack)))

;;;;;;;;;;;;;;;
;; zone copy ;;
;;;;;;;;;;;;;;;

(bind-func zcopy
  (lambda (x:i1 fromz:mzone* toz:mzone*) x))

(bind-func zcopy
  (lambda (x:i8 fromz:mzone* toz:mzone*) x))

(bind-func zcopy
  (lambda (x:i32 fromz:mzone* toz:mzone*) x))

(bind-func zcopy
  (lambda (x:i64 fromz:mzone* toz:mzone*) x))

(bind-func zcopy
  (lambda (x:float fromz:mzone* toz:mzone*) x))

(bind-func zcopy
  (lambda (x:double fromz:mzone* toz:mzone*) x))

;; (bind-poly zcopy zcopy_i1)
;; (bind-poly zcopy zcopy_i8)
;; (bind-poly zcopy zcopy_i32)
;; (bind-poly zcopy zcopy_i64)
;; (bind-poly zcopy zcopy_f)
;; (bind-poly zcopy zcopy_d)

(bind-func zcopy:[!a,!a,mzone*,mzone*]*
  "generic \"catch-all\" zcopy"
  (lambda (x fromz toz)
    (if (llvm_ptr_in_zone fromz (convert x))
        (let ((size (llvm_zone_ptr_size (convert x)))
              (newdat (convert (llvm_zone_malloc (llvm_peek_zone_stack) size))))
          (memcpy (convert newdat) (convert x) size)
          newdat)
        x)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; xtlang strings

;;
(bind-type String <size_t,i8*> (printer? . #f)
  "xtlang's string type

Tuple contains <string_length,pointer_to_data>

Should be created, modified and destroyed with the String_* library functions.

Second item in tuple is a char* c-style string ")

;; easy String dataconstructors from c strings

;; zone alloc'ed versions

(bind-func String
  "Create an xtlang String type from a c string (char array)

Use via the polymorphic Str function

Allocates (zone) memory to store the string.
Allocation size will be (+ (strlen cstr) 1)

@param cstr - character array from which to generate a new String
@return - the new String*
"
  (lambda (cstr)
    (let ((len (strlen cstr))
          (buf:i8* (zalloc (+ len 1))))
      (memcpy buf cstr (+ len 1))
      (String_z len buf))))

(bind-func Str
  (lambda (cstr:i8*)
    (String cstr)))

(bind-func String_h
  "Create an xtlang String type from a c string (char array)

Use via the polymorphic Str function

Allocates (zone) memory to store the string.
Allocation size will be (+ (strlen cstr) 1)

@param cstr - character array from which to generate a new String
@return - the new String*
"
  (lambda (cstr)
    (let ((len (strlen cstr))
          (buf:i8* (halloc (+ len 1))))
      (memcpy buf cstr (+ len 1))
      (String_h:[String*,i64,i8*]* len buf))))

;; (bind-poly String_h String_from_cstr_halloc)
;; (bind-poly Str_h String_from_cstr_halloc)

(bind-func String_free
  "Free an xtlang String

Frees both the underlying character array and the tuple container. The
string must have been a heap-allocated (halloc).

@param s - String to be deleted
"
  (lambda (s:String*)
    (free (tref s 1))
    (free s)
    void))

(bind-func print:[void,String*]*
  "Prints all characters in a given string object.

Overloads and should be used via the `println` function
If the string is empty will print a zero length string

@param s - String to be printed
"
  (lambda (s)
    (if (null? s)
        (begin (printf "")
               void)
        (begin (printf "'%s'" (tref s 1))
               void))))

(bind-func toString:[String*,String*]*
  "convert String to String

This is just the identity function, since a String is already a String."
  (lambda (s)
    s))

(bind-func String_strlen
  "Takes a String* and calls strlen on the data pointer

@param s - the String*
@return length - length (via strlen)"
  (lambda (s:String*)
    (strlen (tref s 1))))

(bind-func length
  "Takes a (null-terminated) String* and returns the string length

@param s - the String*
@return length - length (via strlen)"
  (lambda (s:String*)
    (tref s 0)))

(bind-func validate
  "Check that the String's length matches that returned by strlen

@param s - the String*
@return bool"
  (lambda (s:String*)
    (= (tref s 0) (strlen (tref s 1)))))

(bind-func cstring
  "Return an i8* pointer to the underlying char array

@param s
@return c_str - the underlying i8 'char' array"
  (lambda (s:String*)
    (tref s 1)))

(bind-func String
  "Create a new xtlang String type from an existing String

@param s - pointer to the String to copy
@return - the new String*
"
  (lambda (s:String*)
    (String:[String*,i8*]* (tref s 1))))


(bind-func substring
  "Create a new xtlang String which is a substring of an existing one

If `start' and `end' are out of range, return null

@param s - pointer to an existing String
@param start - substring start index
@param end - substring end index
@return - the new String*
"
  (lambda (s:String* start end)
    ;; handle some arg combinations which are bad
    (if (or (< start 0)
            (< end start)
            (> end (tref s 0)))
        null
        (let ((buf:i8* (zalloc (+ (- end start) 1)))
              (i 0))
          (dotimes (i (- end start))
            (pset! buf i (pref (tref s 1) (+ i start))))
          ;; null-terminate the string
          (pset! buf (- end start) 0)
          (Str buf)))))

(bind-func cat2
  "Concatenate 2 Strings

If one string is null, the alternate String will be returned.
If both strings are null an empty String will be returned

@param s1 - first string to be concatenated
@param s2 - second string to be concatenated
@return - pointer to new String
"
  (lambda (s1:String* s2:String*)
    (if (null? s2) (String s1)
        (if (null? s1) (String s2)
            (let ((size (+ (tref s1 0) (tref s2 0)))
                  (news:i8* (zalloc (+ 1 size))))
              (strcpy news (tref s1 1))
              (strncat news (tref s2 1) size)
              (String news))))))

;; cat macro (poor-man's varargs)

(bind-macro
  "concatenate Strings"
  (cat . args)
  (let loop ((rem (cdr args))
             (ret (car args)))
    (if (null? rem)
        ret
        (loop (cdr rem) (list 'cat2 ret (car rem))))))

(bind-func equal
  "Equality test for String

@param s1 - first string
@param s2 - second string
@return - true/false
"
  (lambda (s1:String* s2:String*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

;; trim whitespace
(bind-func trim
  (lambda (e:String*)
    (let ((s (tref e 1))
          (len (tref e 0)) ;; +1 for cstr
          (i 0)
          (start -1) (end 0))
      (while (and (< i len) (= (pref s i) 32)) (inc i 1))
      (set! start i) (set! i (- len 1))
      (while (and (> i -1) (= (pref s i) 32)) (dec i 1))
      (set! end (+ 1 i))
      ;; (println "s:" start "e:" end (substring e start end))
      (substring e start end))))


;; levenshtein edit distance
(bind-func levenshtein
  "Returns the levenshtein distance between two strings

@param s1 - string 1
@param s1 - string 2
@return - levenshetein distance
"
  (lambda (s1:String* s2:String*)
    (let ((i 0) (j 0)
          ;; column-major indexing closure
          (s1cstr (cstring s1))
          (s1len:size_t (length s1))
          (s2cstr (cstring s1))
          (s2len:size_t (length s1))
          (row:i64* (salloc (+ s1len 1)))
          (prev_row:i64* (salloc (+ s1len 1)))
          (min3 (lambda (a:i64 b c)
                  (if (< a b)
                      (if (< a c)
                          a c)
                      (if (< b c)
                          b c)))))
      (dotimes (i (+ s2len 1))
        (pset! prev_row i i))
      (dotimes (i s1len)
        (pset! row 0 (+ i 1))
        (dotimes (j s2len)
          (pset! row (+ j 1)
                 (min3 (+ (pref row j) 1)
                       (+ 1 (pref prev_row (+ j 1)))
                       (+ (pref prev_row j)
                          (if (= (pref s1cstr j)
                                 (pref s2cstr i))
                              0 1)))))
        (let ((tmp_row:i64* null))
          (set! tmp_row prev_row)
          (set! prev_row row)
          (set! row tmp_row)))
      (pref prev_row s2len))))

(bind-func similarity
  (lambda (s1:String* s2:String*)
    (/ 1.0 (i64tod (+ 1 (levenshtein s1 s2))))))


(bind-func replace
  (lambda (orig:i8* rep:i8* with:i8*)
    (if (null? (strstr orig rep)) (Str orig)
        (let ((origl (strlen orig))
              (repl (strlen rep))
              (withl (strlen with))
              (pos (strstr orig rep))
              (start (- (ptrtoi64 pos) (ptrtoi64 orig)))
              (newstr:i8* (salloc (+ 1 (strlen orig) (- withl repl)))))
          (memset newstr 0 (+ 1 (strlen orig) (- withl repl)))
          (strncpy newstr orig start)
          (strncpy (pref-ptr newstr start) with withl)
          (strncpy (pref-ptr newstr (+ start withl))
                   (pref-ptr orig (+ start repl))
                   (- origl (+ start repl)))
          (Str newstr)))))

(bind-func replace
  (lambda (orig:String* rep:i8* with:i8*)
    (replace:[String*,i8*,i8*,i8*]* (cstring orig) rep with)))

(bind-func replace
  (lambda (orig:String* rep:i8* with:String*)
    (replace:[String*,i8*,i8*,i8*]* (cstring orig) rep (cstring with))))

(bind-func replace
  (lambda (orig:String* rep:String* with:String*)
    (replace:[String*,i8*,i8*,i8*]* (cstring orig) (cstring rep) (cstring with))))

(bind-func replace_all
  (lambda (orig:i8* rep:i8* with:i8*)
    (let ((s1:String* (Str orig))
          (s2:String* (Str with))
          (cnt 0))
      (while (and (not (equal s1 s2))
                  (< cnt 100))
        (set! s2 s1)
        (set! s1 (replace s1 rep with))
        (set! cnt (+ cnt 1)))
      s1)))

(bind-func replace_all
  (lambda (orig:String* rep:i8* with:i8*)
    (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) rep with)))

(bind-func replace_all
  (lambda (orig:String* rep:i8* with:String*)
    (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) rep (cstring with))))

(bind-func replace_all
  (lambda (orig:String* rep:String* with:String*)
    (replace_all:[String*,i8*,i8*,i8*]* (cstring orig) (cstring rep) (cstring with))))


;; ;; TODO

;; start/atindex variants

;; substring
;; insert
;; replace
;; truncate
;; {r,l}trim
;; toupper/tolower
;; compare (caseless as well)
;; concat
;; append
;; firstpos

;; ;; more regex-y ones

;; find/replace

;; ;; list-based

;; split
;; join

;; heap alloc'ed versions

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; equality
;;
;; this is the catch-all for equality testing
;; covers all numeric types
;; will also catch all for all pointer types
;; which compares against memory address
;; otherwise expect poly override
;;
;; i.e. see string below
(bind-func equal:[bool,!a,!b]*
  "basic equality check"
  (lambda (a b)
    (= a b)))

;;;;;;;;;;;;;;;;;;;;;;;
;;
;; formatting!
;;
;; same as print but returns string
;; should REPLACE PRINT!

(bind-func format_return
  (lambda ()
    (let ((str:i8* (salloc 256)))
      (sprintf str "\n")
      (String str))))

;; prints a space
(bind-func format_space
  (lambda ()
    (String " ")))

(bind-func format
  (lambda (x:i1)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%d" x)
      (String str))))

(bind-func format
  (lambda (x:i8)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%d" x)
      (String str))))

(bind-func format
  (lambda (x:i32)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%d" x)
      (String str))))

(bind-func format
  (lambda (x:i64)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%lld" x)
      (String str))))

(bind-func format
  (lambda (x:float)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%f" (ftod x))
      (String str))))

(bind-func format
  (lambda (x:double)
    (let ((str:i8* (salloc 256)))
      (sprintf str "%f" x)
      (String str))))

;; String formatting!
(bind-func format:[String*,String*]*
  (lambda (x) x))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; toString

(bind-func toString_return
  (lambda () (String "\n")))

(bind-func toString_space
  (lambda () (String " ")))

(bind-func toString
  (lambda (x:i1)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%d" x)
      (String s))))

(bind-func toString
  (lambda (x:i8)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%d" x)
      (String s))))

(bind-func toString
  (lambda (x:i32)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%d" x)
      (String s))))

(bind-func toString
  (lambda (x:i64)
    (let ((st:i8* (salloc 256)))
      (sprintf st "%lld" x)
      (String st))))

(bind-func toString
  (lambda (x:float)
    (let ((st:i8* (salloc 256)))
      (sprintf st "%f" (ftod x))
      (String st))))

(bind-func toString
  (lambda (x:double)
    (let ((st:i8* (salloc 256)))
      (sprintf st "%f" x)
      (String st))))

;; generic "catch-all" toString
(bind-func toString:[String*,!a]*
  "generic \"catch-all\" toString"
  (lambda (x) (String "_")))

;; we print i8* as pointers, not C strings - if you want to print them
;; as C strings use printf with %s

(bind-func print
  (lambda (x:i8*) (printf "%p" x) void))

(bind-func toString
  (lambda (x:i8*)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%p" x)
      (String s))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Boxed type

(bind-type Box <!a>
  "a generic 'Box' type")

(bind-func unbox:[!a,Box*]*
  "unboxes any Box into a value"
  (lambda (b)
    (tref b 0)))

(bind-func print:[void,Box*]*
  (lambda (b)
    (printout "<Box '" (tref b 0) "'>")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XTLang symbols

;;
(bind-type Symbol <size_t,i8*> (printer? . #f)
  "xtlang's symbol type

Tuple contains <symbol_length,characters>

Should be created, modified and desymoyed with the Symbol_* library functions.

Second item in tuple is a char* c-style symbol ")

;; must be a Halloced symbol!
(bind-func Symbol_free
  "Free an xtlang Symbol

Frees both the underlying character array and the tuple container.
@param sym - Symbol to be deleted
"
  (lambda (sym:Symbol*)
    (free (tref sym 1))
    (free sym)
    void))

;; Symbol printing!
(bind-func print:[void,Symbol*]*
  "Prints all characters in a given symbol object.

Overloads and should be used via the `println` function
If the symbol is empty will print a zero length symbol

@param sym - Symbol to be printed
"
  (lambda (x)
    (if (null? x)
        (begin (printf "")
               void)
        (begin (printf "%s" (tref x 1))
               void))))


(bind-func toString:[String*,Symbol*]*
  "convert Symbol to String"
  (lambda (x)
    (String (tref x 0) (tref x 1))))

(bind-func length
  "Takes a (null-terminated) Symbol* and returns the symbol length

@param sym - the Symbol*
@return length - length (via symlen)"
  (lambda (sym:Symbol*)
    (strlen (tref sym 1))))

(bind-func size
  "Takes a Symbol* and returns the size of allocated memory

Not necessarily the same as length -
@param sym - the Symbol
@return size - size of alloc'ed memory"
  (lambda (sym:Symbol*)
    (tref sym 0)))

(bind-func cstring
  "Return an i8* pointer to the underlying char array

@param sym
@return c_sym - the underlying i8 'char' array"
  (lambda (sym:Symbol*)
    (tref sym 1)))

(bind-func Symbol
  "Create an xtlang Symbol type from a c string (char array)

Use via the polymorphic Str function

@param s - character array from which to generate a new Symbol
@return - the new Symbol*
"
  (lambda (s)
    (let ((len (strlen s))
          (str (Symbol_z len s)))
      str)))

(bind-func Symbol
  "Create a new xtlang Symbol type from an existing Symbol

Use via the polymorphic Str function

@param s - pointer to the Symbol to copy
@return - the new Symbol*
"
  (lambda (str:Symbol*)
    (let ((len (length str))
          (new_str (Symbol_z len (cstring str))))
      new_str)))

(bind-func equal
  "Equality test for Symbol

@param s1 - first symbol
@param s2 - second symbol
@return - true/false
"
  (lambda (s1:Symbol* s2:Symbol*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

(define *xtmlib-base-loaded* #t)

(impc:aot:insert-footer "xtmbase")
