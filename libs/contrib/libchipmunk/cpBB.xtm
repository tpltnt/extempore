(bind-type cpBB <cpFloat,cpFloat,cpFloat,cpFloat>)

(bind-func print
   (lambda (a:cpBB)
     (printf "<cpBB: l=%.3lf, b=%.3lf, r=%.3lf, t=%.3lf>"
       (tref a 0) (tref a 1) (tref a 2) (tref a 3))
     void))

(bind-func cpBBNew
  (lambda (l:cpFloat b:cpFloat r:cpFloat t:cpFloat)
    (cpBB_val l b r t)))

(bind-func cpBBNewForExtents
  (lambda (c:cpVect hw:cpFloat hh:cpFloat)
    (cpBB_val (- (tref c 0) hw) (- (tref c 1) hh) (+ (tref c 0) hw) (+ (tref c 1) hh))))

(bind-func cpBBNewForCircle
  (lambda (p:cpVect r:cpFloat)
    (cpBBNewForExtents p r r)))

(bind-func cpBBIntersects
  (lambda (a:cpBB b:cpBB)
    (convert (and
        (<= (tref a 0) (tref b 2))
        (<= (tref b 0) (tref a 2))
        (<= (tref a 1) (tref b 3))
        (<= (tref b 1) (tref a 3)))
      cpBool)))

(bind-func cpBBContainsBB
  (lambda (bb:cpBB other:cpBB)
    (convert (and
        (<= (tref bb 0) (tref other 0))
        (>= (tref bb 2) (tref other 2))
        (<= (tref bb 1) (tref other 1))
        (>= (tref bb 3) (tref other 3)))
      cpBool)))

(bind-func cpBBContainsVect
  (lambda (bb:cpBB v:cpVect)
    (convert (and
        (<= (tref bb 0) (tref v 0))
        (>= (tref bb 2) (tref v 0))
        (<= (tref bb 1) (tref v 1))
        (>= (tref bb 3) (tref v 1)))
      cpBool)))

(bind-func cpBBMerge
  (lambda (a:cpBB b:cpBB)
    (cpBB_val
      (min (tref a 0) (tref b 0))
      (min (tref a 1) (tref b 1))
      (max (tref a 2) (tref b 2))
      (max (tref a 3) (tref b 3)))))

(bind-func cpBBExpand
  (lambda (bb:cpBB v:cpVect)
    (cpBB_val
      (min (tref bb 0) (tref v 0))
      (min (tref bb 1) (tref v 1))
      (max (tref bb 2) (tref v 0))
      (max (tref bb 3) (tref v 1)))))

;; (bind-func cpBBCenter ;; original "implementation" (from literal translation) - not so good
;;   (lambda (bb:cpBB)
;;     (cpvlerp (cpVect_val (tref bb 0) (tref bb 1)) (cpVect_val (tref bb 2) (tref bb 3)) 0.5)))

(bind-func cpBBCenter
  (lambda (bb:cpBB)
    (cpVect_val (/ (+ (tref bb 0) (tref bb 2)) 2.) (/ (+ (tref bb 1) (tref bb 3)) 2.))))

(bind-func cpBBArea
  (lambda (bb:cpBB)
    (* (- (tref bb 2) (tref bb 0)) (- (tref bb 3) (tref bb 1)))))

(bind-func cpBBMergedArea
  (lambda (a:cpBB b:cpBB)
    (*
      (- (max (tref a 2) (tref b 2)) (min (tref a 0) (tref b 0)))
      (- (max (tref a 3) (tref b 3)) (min (tref a 1) (tref b 1))))))

(bind-func cpBBSegmentQuery
  (lambda (bb:cpBB a:cpVect b:cpVect)
    (let ((delta (cpvsub b a)) (tmin (- 0. CPFLOAT_MAX)) (tmax CPFLOAT_MAX))
      (if (<> (tref delta 0) 0.)
        (let (
            (t1 (/ (- (tref bb 0) (tref a 0)) (tref delta 0)))
            (t2 (/ (- (tref bb 2) (tref a 0)) (tref delta 0))))
          (set! tmin (max tmin (min t1 t2)))
          (set! tmax (min tmax (max t1 t2)))))
      (if (<> (tref delta 1) 0.)
        (let (
            (t1 (/ (- (tref bb 1) (tref a 1)) (tref delta 1)))
            (t2 (/ (- (tref bb 3) (tref a 1)) (tref delta 1))))
          (set! tmin (max tmin (min t1 t2)))
          (set! tmax (min tmax (max t1 t2)))))
      (if (and (<= tmin tmax) (<= 0. tmax) (<= tmin 1.))
        (max tmin 0.)
        (CPFLOAT_MAX)))))

(bind-func cpBBIntersectsSegment
  (lambda (bb:cpBB a:cpVect b:cpVect)
    (convert (<> CPFLOAT_MAX (cpBBSegmentQuery bb a b)) cpBool)))

(bind-func cpBBClampVect
  (lambda (bb:cpBB v:cpVect)
    (cpVect_val
      (clamp (tref v 0) (tref bb 0) (tref bb 2))
      (clamp (tref v 1) (tref bb 1) (tref bb 3)))))

(bind-func cpBBWrapVect
  (lambda (bb:cpBB v:cpVect)
    (let (
        (dx (fabs (- (tref bb 2) (tref bb 0))))
        (modx (fmod (- (tref v 0) (tref bb 0)) dx))
        (x modx)
        (dy (fabs (- (tref bb 3) (tref bb 1))))
        (mody (fmod (- (tref v 1) (tref bb 1)) dx))
        (y mody))
      (if (< modx 0.)
        (set! x (+ x dx)))
      (if (< mody 0.)
        (set! y (+ y dy)))
      (cpVect_val (+ x (tref bb 0)) (+ y (tref bb 1))))))

;; (bind-func test
;;   (lambda ()
;;     (let ((point (cpVect_val 5. 5.)) (b1 (cpBB_val -1. -1. 1. 1.)) (b2 (cpBB_val 0.5 0.5 5. 3.))
;;         (v (cpVect_val 0.25 0.75)))
;;       (println (cpBBNew 1. 2. 3. 4.))
;;       (println (cpBBNewForExtents point 1.0 2.0))
;;       (println (cpBBNewForCircle point 1.5))
;;       (println (cpBBIntersects b1 b2))
;;       (println (cpBBContainsBB b1 b2))
;;       (println (cpBBContainsVect b1 v))
;;       (println (cpBBMerge b1 b2))
;;       (println (cpBBExpand b1 (cpVect_val -2. 6.)))
;;       (println (cpBBCenter b2))
;;       (println (cpBBArea b2))
;;       (println (cpBBMergedArea b1 b2))
;;       (println (cpBBSegmentQuery b1 (cpVect_val 3. 2.) v))
;;       (println (cpBBIntersectsSegment b1 (cpVect_val -3. -2.) v))
;;       (println (cpBBClampVect b1 (cpVect_val 3. 0.8)))
;;       (println (cpBBWrapVect b1 (cpVect_val 3.2 0.8)))
;;     )))

;; (test)
