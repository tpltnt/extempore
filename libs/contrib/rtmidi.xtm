;;; rtmidi.xtm -- MIDI support for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: librtmidic

;;; Commentary:

;; **NOTE** rtmidi support in extempore is deprecated (although this
;; file might still work for you). MIDI support is now provided
;; through PortMidi - see libs/external/portmidi.xtm

;; The rtmidi library is a cross-platform MIDI library by Gary P.
;; Scavone.

;; Source and documentation for the rtmidi library is available at
;; http://music.mcgill.ca/~gary/rtmidi/

;; Because rtmidi is a C++ library (and Extempore can only bind C libs
;; at this stage), there is a project called librtmidic (note the
;; trailing 'c') which wraps (part) of the rtmidi API in a C
;; interface. This library wraps this rtmidi-C interface in xtlang for
;; use in Extempore.

;; you get build librtmidic through homebrew (just tap
;; benswift/extempore on OSX or benswift/extemporelinux on Linux), or
;; you can build it yourself - source is available at
;; https://github.com/benswift/rtmidi-c-api

;;; Code:
(sys:load "libs/aot-cache/rtmidi.xtm" 'quiet)
(sys:load-preload-check 'rtmidi)
(define *xtmlib-rtmidi-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmrtmidi")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib librtmidi
  (cond ((string=? (sys:platform) "OSX")
         "librtmidic.dylib")
        ((string=? (sys:platform) "Linux")
         "librtmidic.so")
        ((string=? (sys:platform) "Windows")
         "rtmidilib.dll")))

(bind-val RTMIDI_NOERROR i32 0)
(bind-val RTMIDI_ERROR i32 1)

(impc:aot:do-and-emit
 (sys:load "libs/contrib/rtmidi-scm.xtm"))

(bind-val MIDI_NOTE_OFF i8 8)
(bind-val MIDI_NOTE_ON i8 9)
(bind-val MIDI_AFTERTOUCH i8 10)
(bind-val MIDI_CONTROL_CHANGE i8  11)
(bind-val MIDI_CC i8 MIDI_CONTROL_CHANGE)
(bind-val MIDI_PROGRAM_CHANGE i8  12)
(bind-val MIDI_CHANNEL_PRESSURE i8  13)
(bind-val MIDI_PITCH_BEND i8  14)

;; API selection enums

(bind-val UNSPECIFIED i32 0) ;; try to auto-detect the platform
(bind-val MACOSX_CORE i32 1)
(bind-val LINUX_ALSA  i32 2)
(bind-val UNIX_JACK   i32 3)
(bind-val WINDOWS_MM  i32 4)
(bind-val WINDOWS_KS  i32 5)
(bind-val RTMIDI_DUMMY i32 6)

(bind-type midi_in_device <i8*>)
(bind-type midi_out_device <i8*>)
(bind-alias midi_callback [i8*,double,i64,i8*]*)

;; midi input

(bind-lib librtmidi newMidiInDevice [i32,midi_in_device*,i32,i8*]*)
(bind-lib librtmidi deleteMidiInDevice [i32,midi_in_device*]*)

(bind-lib librtmidi getInCurrentApi [i64,midi_in_device*]*)
(bind-lib librtmidi getInPortCount [i64,midi_in_device*]*)
(bind-lib librtmidi getInPortName [i8*,midi_in_device*,i64]*)

(bind-lib librtmidi openInPort [i32,midi_in_device*,i64,i8*]*)
(bind-lib librtmidi openInVirtualPort [i32,midi_in_device*,i8*]*)
(bind-lib librtmidi closeInPort [i32,midi_in_device*]*)

(bind-lib librtmidi setCallback [i32,midi_in_device*,i8*]*)
(bind-lib librtmidi cancelCallback [i32,midi_in_device*]*)

;; midi output

(bind-lib librtmidi newMidiOutDevice [i32,midi_out_device*,i32,i8*]*)
(bind-lib librtmidi deleteMidiOutDevice [i32,midi_out_device*]*)

(bind-lib librtmidi getOutCurrentApi [i64,midi_out_device*]*)
(bind-lib librtmidi getOutPortCount [i64,midi_out_device*]*)
(bind-lib librtmidi getOutPortName [i8*,midi_out_device*,i64]*)

(bind-lib librtmidi openOutPort [i32,midi_out_device*,i64,i8*]*)
(bind-lib librtmidi openOutVirtualPort [i32,midi_out_device*,i8*]*)
(bind-lib librtmidi closeOutPort [i32,midi_out_device*]*)
(bind-lib librtmidi sendMessage [i32,midi_out_device*,i64,i8*]*)

;; poly'ing

;; (bind-poly newMidiDevice newMidiInDevice)
;; (bind-poly newMidiDevice newMidiOutDevice)
;; (bind-poly deleteMidiDevice deleteMidiInDevice)
;; (bind-poly deleteMidiDevice deleteMidiOutDevice)
;; (bind-poly getCurrentApi getInCurrentApi)
;; (bind-poly getCurrentApi getOutCurrentApi)
;; (bind-poly getPortCount getInPortCount)
;; (bind-poly getPortCount getOutPortCount)
;; (bind-poly getPortName getInPortName)
;; (bind-poly getPortName getOutPortName)
;; (bind-poly openPort openInPort)
;; (bind-poly openPort openOutPort)
;; (bind-poly openVirtualPort openInVirtualPort)
;; (bind-poly openVirtualPort openOutVirtualPort)
;; (bind-poly closePort closeInPort)
;; (bind-poly closePort closeOutPort)

;;  set up some input/output ports

(bind-func midi_query_inports
  (lambda (dev:midi_in_device*)
    (let ((num_ports (getInPortCount dev))
          (i:i64 0))
      (printf "--Input ports--\n")
      (dotimes (i num_ports)
	(printf "Port %lld: %s\n" i (getInPortName dev i)))
      (printf "\n")
      void)))

(bind-func midi_query_outports
  (lambda (dev:midi_out_device*)
    (let ((num_ports (getOutPortCount dev))
          (i:i64 0))
      (printf "--Output ports--\n")
      (dotimes (i num_ports)
	(printf "Port %lld: %s\n" i (getOutPortName dev i)))
      (printf "\n")
      void)))

(bind-poly midi_query_ports midi_query_inports)
(bind-poly midi_query_ports midi_query_outports)

;; device/port creation

(bind-func midi_new_indevice
  (lambda ()
    (let ((device:midi_in_device* (halloc)))    
      (newMidiInDevice device UNSPECIFIED "Extempore Midi Input Device")
      device)))

(bind-func midi_new_outdevice
  (lambda ()
    (let ((device:midi_out_device* (halloc)))    
      (newMidiOutDevice device UNSPECIFIED "Extempore Midi Output Device")
      device)))

(bind-func midi_open_inport
  (lambda (device:midi_in_device* port)
    (openInPort device port "Extempore Input Port")))

(bind-func midi_open_virtual_inport
  (lambda (device:midi_in_device*)
    (openInVirtualPort device "Extempore Virtual Input Port")))

(bind-func midi_open_outport
  (lambda (device:midi_out_device* port)
    (openOutPort device port "Extempore Output Port")))

(bind-func midi_open_virtual_outport
  (lambda (device:midi_out_device*)
    (openOutVirtualPort device "Extempore Virtual Output Port")))

;; device/port destruction

(bind-func midi_delete_indevice
  (lambda (device:midi_in_device*)
    (deleteMidiInDevice device)))

(bind-func midi_delete_outdevice
  (lambda (device:midi_out_device*)
    (deleteMidiOutDevice device)))

(bind-func midi_close_inport
  (lambda (device:midi_in_device*)
    (closeInPort device)))

(bind-func midi_close_outport
  (lambda (device:midi_out_device*)
    (closeOutPort device)))

;; (bind-poly midi_delete_device midi_delete_indevice)
;; (bind-poly midi_delete_device midi_delete_outdevice)

(bind-func midi_default_callback
  (let ((type:i8 0) (chan:i8 0) (a:i8 0) (b:i8 0))
    (lambda (time:double len:i64 msg:i8*)
      (set! type (>> (pref msg 0) 4))
      (set! chan (& (pref msg 0) 15))
      (set! a (pref msg 1))
      (set! b (pref msg 2))
      (printf "time = %f\ntype = %u\nchan = %u\na = %u\nb = %u\n---------------\n"
              time (i8toi32 type) (i8toi32 chan) (i8toi32 a) (i8toi32 b))
      void)))

(bind-func midi_register_device
  "Register a midi sink/source"
  (lambda (device:midi_in_device* callback_name:i8*)
    (let ((len (strlen callback_name))
          (callback_name_native:i8* (salloc (+ len 8))))
      (strncpy callback_name_native callback_name (+ 1 len))
      (strncpy (pref-ptr callback_name_native len) "_native" 8)
      (let ((fptr (llvm_get_function_ptr callback_name_native)))
        (if (null? fptr)
            (printf "Error: cannot find xtlang function %s\n" callback_name)
            (begin
              (printf "\nregistering %s as MIDI callback function\n\n" callback_name)
              (setCallback device fptr)))))))

(bind-func midi_unregister_device
  "Register Extempore as a midi sink/source"
  (lambda (device:midi_in_device*)
    (cancelCallback device)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; default Extempore MIDI connectivity ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (midi-deregister-events)


;; TODO I'm up to here

;; (midi_unregister_device *midi-extempore-virtual-inp)

;; (midi_query_inports (midi_new_indevice))
;; (midi_query_outports (midi_new_outdevice))

(bind-func midi_send
  (lambda (device:midi_out_device* type chan a b)
    (let ((msg:i8* (salloc 3)))
      (pfill! msg (+ (<< type 4) chan) a b)
      (sendMessage device 3 msg))))

(impc:aot:insert-footer "xtmrtmidi")
(define *xtmlib-rtmidi-loaded* #t)
