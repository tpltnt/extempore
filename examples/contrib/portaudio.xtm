;;; portaudio.xtm

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libportaudio

;;; Commentary:

;; Pure xtlang bindings for Portaudio.

;;; Code:

(sys:load "libs/external/portaudio.xtm")

(pa_initialize)
(pa_print_devices)

;; we need a callback function - which just generates white noise at
;; this stage
(bind-func audio_callback:PaStreamCallback
  (lambda (input output frameCount timeInfo statusFlags userData)
    (doloop (i (* frameCount 2))
      (pset! (convert output float*) i (random 0.1)))
    ;; to ensure the callback continues to be called
    paContinue))

(bind-val output_stream PaStream*
  (pa_create_default_stream
   0 2 (convert (get_native_fptr audio_callback))))

;; create a stereo output stream (default device)

;; stop the stream
(call-as-xtlang
 (Pa_CloseStream output_stream))

;; or, we can specify the stream parameters

(call-as-xtlang
 (set! output_stream
       (pa_create_stream null ;; no input
                         (pa_params_for_output_device (Pa_GetDefaultOutputDevice))
                         (convert (get_native_fptr audio_callback)))))

;; we can re-create the old "sample-by-sample" dsp callback easily -
;; now in pure xtlang!

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (cos (/ (* 6.28 (convert time) 440.) 44100.))))

(bind-func audio_callback:PaStreamCallback
  (let ((time 0)
        (nchan 2) ;; assume stereo
        (idx 0))
    (lambda (input output frameCount timeInfo statusFlags userData)
      (doloop (i frameCount)
        (doloop (j nchan)
          (set! idx (+ (* i nchan) j))
          ;; fill the output buffer with repeated values from our dsp
          ;; closure (no input in this version, but that's easy to do)
          (pset! (convert output float*)
                 idx
                 (dsp 0.0 time j null)))
        (set! time (+ time 1)))
      ;; to ensure the callback continues to be called
      paContinue)))

;; shut it down
(call-as-xtlang
 (Pa_CloseStream output_stream)
 (Pa_Terminate))
