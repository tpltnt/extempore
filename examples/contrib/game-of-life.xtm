(sys:load "libs/external/glfw3.xtm")

(bind-val window GLFWwindow*
  (glfw_init_and_create_interaction_window 800 600))

(sys:load "libs/contrib/game-of-life.xtm")
(sys:load "libs/external/gl/gl-objects.xtm")

(bind-val fullscreen_quad_verts float* 16)

(bind-val world World*)
(bind-val tex Texture)
(bind-val vbo VBO*)
(bind-val vao VAO*)
(bind-val sp ShaderProgram)

(bind-func world_texture_setup
  (lambda ()
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D tex)
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGB
                  (convert (world_width world))
                  (convert (world_height world))
                  0
                  GL_RED
                  GL_BYTE
                  (world_data world))
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
    (gl_print_error "in world_texture_setup")))

;; init
(call-as-xtlang
 (set! sp (ShaderProgram_create
           (sys_slurp_file "examples/contrib/game-of-life.vert")
           (sys_slurp_file "examples/contrib/game-of-life.frag")))
 (pfill! fullscreen_quad_verts
         ;; pos       texcoord
         -1.0  1.0    0.0 0.0
         1.0  1.0    1.0 0.0
         -1.0 -1.0    0.0 1.0
         1.0 -1.0    1.0 1.0)
 (set! world (world_create 64 64))
 ;; (world_set_to_checkerboard world)
 (world_init world .5)
 (set! vbo (VBO_create fullscreen_quad_verts 16))
 (set! vao (VAO_create))
 (VAO_bind_attribute vao vbo 0 2 4 0) ;; position
 (VAO_bind_attribute vao vbo 1 2 4 2) ;; tex_coord
 (set! tex (Texture_create))
 (world_texture_setup)
 void)

(bind-func gl_draw
  (lambda ()
    (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; run the simulation
    (world_step world)
    ;; update texture
    (glTexSubImage2D GL_TEXTURE_2D 0 0 0
                     (convert (world_width world))
                     (convert (world_height world))
                     GL_RED
                     GL_BYTE
                     (world_data world))
    ;; draw the world
    (let ((texloc (glGetUniformLocation sp "tex")))
      (glUseProgram sp)
      (glUniform1i texloc 0))
    (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
    (glfwSwapBuffers window)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (gl_draw))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

;; run once
(gl_draw)

;; start it running
(gl-loop (now) 1/5)

;; (randomly) reinitialise the world
(call-as-xtlang (world_init world .1))
