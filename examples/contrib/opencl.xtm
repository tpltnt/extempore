;;; opencl.xtm -- a "Hello World" for OpenCL 1.2

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;

;;; Code:

(sys:load "libs/external/opencl.xtm")

(bind-val KernelSource i8* "__kernel void square(
   __global float* input,
   __global float* output,
   const unsigned int count)
{
   int i = get_global_id(0);
   if(i < count)
       output[i] = input[i] * input[i];
}")

(bind-func main
  (lambda (argc:i32 argv:i8**)
    (letz ((DATA_SIZE 1024)
           (err:i32* (alloc)) ;; error code returned from api calls
           (data:float* (alloc DATA_SIZE)) ;; original data set given to device
           (results:float* (alloc DATA_SIZE)) ;; results returned from device
           (correct 0) ;; number of correct results returned
           (global:size_t* (alloc)) ;; global domain size for our calculation
           (local:size_t* (alloc)) ;; local domain size for our calculation
           (device_id:cl_device_id* (alloc))    ;; compute device id
           (context:cl_context* (alloc))        ;; compute context
           (commands:cl_command_queue* (alloc)) ;; compute command queue
           (program:cl_program* (alloc))        ;; compute program
           (kernel:cl_kernel* (alloc))          ;; compute kernel
           (input:cl_mem* (alloc)) ;; device memory used for the input array
           (output:cl_mem* (alloc)) ;; device memory used for the output array
           (count:size_t DATA_SIZE)
           (KernelSourcePtr:i8** (salloc))
           (gpu #t))
      ;; fill data set with random values
      (doloop (i DATA_SIZE)
        (pset! data i (random)))
      ;; connect to a compute device
      (pset! err 0 (clGetDeviceIDs null
                                                      (if gpu
                                                          CL_DEVICE_TYPE_GPU
                                                          CL_DEVICE_TYPE_CPU)
                                                      1
                                                      device_id
                                                      null))
      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to create a device group!"))
      ;; Create a compute context
      (pset! context 0 (clCreateContext null 1 device_id null null err))
      (if (null? (pref context 0))
          (println "Error: Failed to create a compute context!"))
      ;; Create a command queue
      (pset! commands 0 (clCreateCommandQueue (pref context 0) (pref device_id 0) 0 err))
      (if (null? (pref commands 0))
          (println "Error: Failed to create a command queue!"))
      ;; Create the compute program from the source buffer
      (pset! KernelSourcePtr 0 KernelSource)
      (pset! program 0 (clCreateProgramWithSource (pref context 0) 1 KernelSourcePtr null err))
      (if (null? (pref program 0))
          (println "Error: Failed to create compute program!"))
      ;; Build the program executable
      (pset! err 0 (clBuildProgram (pref program 0) 0 null null null null))
      (if (<> (pref err 0) CL_SUCCESS)
          (let ((len:size_t* (salloc))
                (buffer:i8* (salloc 2048)))

            (println "Error: Failed to build program executable!")
            (clGetProgramBuildInfo (pref program 0) (pref device_id 0) CL_PROGRAM_BUILD_LOG 2048 buffer len)
            (println buffer)))
      ;; Create the compute kernel in the program we wish to run
      (pset! kernel 0 (clCreateKernel (pref program 0) "square" err))
      (if (or (null? (pref kernel 0))
              (<> (pref err 0) CL_SUCCESS))
          (println "Error: Failed to create compute kernel!"))

      ;; Create the input and output arrays in device memory for our calculation
      (pset! input 0 (clCreateBuffer (pref context 0) CL_MEM_READ_ONLY (* 4 count) null null))
      (pset! output 0 (clCreateBuffer (pref context 0) CL_MEM_WRITE_ONLY (* 4 count) null null))
      (if (or (null? (pref input 0))
              (null? (pref output 0)))
          (println "Error: Failed to allocate device memory!"))

      ;; Write our data set into the input array in device memory
      (pset! err 0 (clEnqueueWriteBuffer (pref commands 0) (pref input 0) CL_TRUE 0 (* 4 count) (convert data) 0 null null))
      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to write to source array!"))

      ;; Set the arguments to our compute kernel
      (pset! err 0 0)

      (pset! err 0 (clSetKernelArg (pref kernel 0) 0 8 (convert input)))
      (pset! err 0 (bitwise-or (pref err 0) (clSetKernelArg (pref kernel 0) 1 8 (convert output))))
      (let ((count_ptr:size_t* (salloc)))
        (pset! count_ptr 0 count)
        (pset! err 0 (bitwise-or (pref err 0) (clSetKernelArg (pref kernel 0) 2 4 (convert count_ptr)))))

      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to set kernel arguments!"))

      ;; Get the maximum work group size for executing the kernel on the device
      (pset! err 0 (clGetKernelWorkGroupInfo (pref kernel 0) (pref device_id 0) CL_KERNEL_WORK_GROUP_SIZE 8 (convert local) null))

      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to retrieve kernel work group info!" (pref err 0)))
      ;; Execute the kernel over the entire range of our 1d input data set
      ;; using the maximum number of work group items for this device
      (pset! global 0 count)
      (pset! err 0 (clEnqueueNDRangeKernel (pref commands 0) (pref kernel 0) 1 null global local 0 null null))
      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to execute kernel"))
      ;; Wait for the command commands to get serviced before reading back results
      (clFinish (pref commands 0))

      ;; Read back the results from the device to verify the output
      (pset! err 0 (clEnqueueReadBuffer (pref commands 0) (pref output 0) CL_TRUE 0 (* 4 count) (convert results) 0 null null))
      (if (<> (pref err 0) CL_SUCCESS)
          (println "Error: Failed to read output array!" err))

      ;; Validate our results
      (doloop (i count)
        (if (= (pref results i)
               (* (pref data i)
                  (pref data i)))
            (set! correct (+ correct 1))))

      ;; Print a brief summary detailing the results
      (printf "Computed '%d/%d' correct values!\n" correct count)

      ;; Shutdown and cleanup
      (clReleaseMemObject (pref input 0))
      (clReleaseMemObject (pref output 0))
      (clReleaseProgram (pref program 0))
      (clReleaseKernel (pref kernel 0))
      (clReleaseCommandQueue (pref commands 0))
      (clReleaseContext (pref context 0)))))

(call-as-xtlang
 (main 0 null))
