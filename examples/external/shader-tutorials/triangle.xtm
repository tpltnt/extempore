;;; triangle.xtm -- basic OpenGL drawing and window management

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3

;;; Commentary:

;; Hello Triangle!

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

;; shader stuff

(bind-val triangle_vert_data |15,float|)
(bind-val view_mat |16,float|) ;; view matrix

(bind-val vbo VBO*)
(bind-val vao VAO*)
(bind-val sp ShaderProgram)

(bind-func reset_view_matrix
  (lambda ()
    (afill! view_mat
         1.0 0.0 0.0 0.0
         0.0 1.0 0.0 0.0
         0.0 0.0 1.0 0.0
         0.0 0.0 0.0 1.0)))

;; init data
(call-as-xtlang
 (afill! triangle_vert_data
         ;; pos      colour
          0.0  0.5   1.0 0.0 0.0
          0.5 -0.5   0.0 1.0 0.0
          -0.5 -0.5   0.0 0.0 1.0)
 (reset_view_matrix)
 (set! vbo (VBO_create (aref-ptr triangle_vert_data 0) 15))
 (set! vao (VAO_create))
 (VAO_bind_attribute vao vbo 0 2 5 0) ;; position
 (VAO_bind_attribute vao vbo 1 3 5 2) ;; tex_coord
 void)

(call-as-xtlang
 (set! sp (ShaderProgram_create
           (sys_slurp_file "examples/external/shader-tutorials/triangle.vert")
           (sys_slurp_file "examples/external/shader-tutorials/triangle.frag"))))

;; doesn't do anything (yet!)
(bind-func move_triangle
  (lambda (window:GLFWwindow*)
    void))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (glClear GL_COLOR_BUFFER_BIT)
    (glUseProgram sp)
    (let ((loc (glGetUniformLocation sp "view_mat")))
      (glUniformMatrix4fv loc 1 GL_FALSE (aref-ptr view_mat 0))
      (VAO_bind_and_draw_arrays vao GL_TRIANGLES 0 3))
    (glfwPollEvents)
    (move_triangle window)
    (glfwSwapBuffers window)
    (if (= (glfwWindowShouldClose window) 1)
        (begin (glfwDestroyWindow window)
               (println "Window closed, stopping draw loop."))
        (let ((next_time (+ time (convert (* 44100. delta_t)))))
          (callback next_time gl_draw_loop next_time delta_t)))))

(gl_draw_loop (now) (/ 1.0 60.0)) ;; 60fps

;; now, let's update our key callback to translate and scale the triangle
;; using the arrow keys (hold shift to scale)
(bind-func move_triangle
  (let ((speed 0.05))
    (lambda (window)
      (if (or (= GLFW_PRESS (glfwGetKey window GLFW_KEY_LEFT_SHIFT))
              (= GLFW_PRESS (glfwGetKey window GLFW_KEY_RIGHT_SHIFT)))
          ;; scale
          (begin
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_LEFT))
                (aset! view_mat 0 (- (aref view_mat 0) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_RIGHT))
                (aset! view_mat 0 (+ (aref view_mat 0) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_DOWN))
                (aset! view_mat 5 (- (aref view_mat 5) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_UP))
                (aset! view_mat 5 (+ (aref view_mat 5) speed))))
          ;; translate
          (begin
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_LEFT))
                (aset! view_mat 12 (- (aref view_mat 12) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_RIGHT))
                (aset! view_mat 12 (+ (aref view_mat 12) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_DOWN))
                (aset! view_mat 13 (- (aref view_mat 13) speed)))
            (if (= GLFW_PRESS (glfwGetKey window GLFW_KEY_UP))
                (aset! view_mat 13 (+ (aref view_mat 13) speed)))))
      void)))
