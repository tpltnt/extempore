(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

;; a basic 2D particle with position and velocity
;;                  <x     y     vx    vy   >
;; (bind-type Particle <float,float,float,float>)

(bind-val num_particles i64 10)
(bind-val particles_verts float* 40) ;; (* 4 num_particles)

(bind-func distribute_particles
  "randomly initialise the particles_verts to "
  (lambda (np)
    (doloop (i np)
      (pset! particles_verts (+ (* i 4) 0) (random -1. 1.))
      (pset! particles_verts (+ (* i 4) 1) (random -1. 1.))
      (pset! particles_verts (+ (* i 4) 2) (random -1. 1.))
      (pset! particles_verts (+ (* i 4) 3) (random -1. 1.)))))

(bind-func print_particle
  (lambda (p:float*)
    (printf "<%.2f %.2f %.2f %.2f>\n"
            (convert (pref p 0) double)
            (convert (pref p 1) double)
            (convert (pref p 2) double)
            (convert (pref p 3) double))))

(bind-func move_particles
  "move the particles_verts according to their velocities"
  (lambda (np:i64 step:float)
    (let ((p:float* null))
      (doloop (i np)
        (set! p (pref-ptr particles_verts (* i 4)))
        ;; update x pos
        (pset! p 0 (% (+ (pref p 0)
                         (* (pref p 2) step))
                      1.0))
        ;; update y pos
        (pset! p 1 (% (+ (pref p 1)
                         (* (pref p 3) step))
                      1.0))))))

;; OpenGL setup

(call-as-xtlang
 (glEnable GL_PROGRAM_POINT_SIZE)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA))

(bind-val particles_tex Texture)
(bind-val particles_vbo VBO*)
(bind-val particles_vao VAO*)
(bind-val sp ShaderProgram)

(bind-func create_particles_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_particles_shader (sys:slurp-file "examples/external/shader-tutorials/particles.vert")
                         (sys:slurp-file "examples/external/shader-tutorials/particles.frag"))

;; init
(call-as-xtlang
 (distribute_particles num_particles)
 (set! particles_vbo (VBO_create particles_verts (* num_particles 4))) ;; num_particles = 10
 (set! particles_vao (VAO_create))
 (VAO_bind_attribute particles_vao particles_vbo 0 2 4 0)
 (VAO_bind_attribute particles_vao particles_vbo 1 2 4 2)
 (set! particles_tex (Texture_bind_image (Texture_create) "assets/images/star.png"))
 (if (< particles_tex 0)
     (println "Whoops - particles_tex is null"))
 void)

;; draw all the things

(bind-func position_update
  (lambda ()
    (move_particles num_particles .01)))

(bind-func gl_draw_particles
  (lambda ()
    (glClear GL_COLOR_BUFFER_BIT)
    ;; move particles, update VBO
    (VBO_update_data particles_vbo)
    ;; draw the world
    (let ((texloc (glGetUniformLocation sp "particles_tex")))
      (glUseProgram sp)
      (glUniform1i texloc 0))
    (VAO_bind_and_draw_arrays particles_vao GL_POINTS 0 (convert num_particles))
    (glfwSwapBuffers window)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((next-frame-time (+ time (* *second* delta-t))))
      (position_update)
      (if (not (> (now) next-frame-time))
        (gl_draw_particles))
      (callback next-frame-time
                'gl-loop
                next-frame-time
                delta-t))))

;; start it running
(gl-loop (now) 1/30)
